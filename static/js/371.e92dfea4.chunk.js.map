{"version":3,"file":"static/js/371.e92dfea4.chunk.js","mappings":"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","sources":["Pages/Candidates/emptyCandidate.ts","components/FormMultiTextInput/index.tsx","components/MapsInput/LocationMarker.tsx","axios/index.ts","components/MapsInput/helpers.ts","components/MapsInput/index.tsx","mockData/coords.ts","Pages/Candidates/CandidateModal.tsx","Pages/Candidates/CandidatesTable.tsx","Pages/Candidates/index.tsx","components/ActionModal/index.tsx","components/CRUDTable/index.tsx","components/CRUDTable/helpers.ts","components/FormInput/index.tsx","mockData/candidates.ts"],"sourcesContent":["export const emptyCandidate = {\r\n  id: 0,\r\n  name: \"\",\r\n  surname: \"\",\r\n  CVAddress: \"\",\r\n  phoneNumbers: [],\r\n  emailAdresses: [],\r\n  address: \"\",\r\n  extraAddress: \"\",\r\n  zipCode: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  mapsCoord: \"\",\r\n  creatorMember: {},\r\n  previousJobs: [],\r\n  skills: [],\r\n  comment: \"\",\r\n  salaryExpectation: 0,\r\n  departments: [],\r\n  keywords: [],\r\n  situation: \"free\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  InputAdornment,\r\n  Grid,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Add, Remove } from \"@mui/icons-material\";\r\n\r\ninterface IFormMultiTextInputProps {\r\n  label: string;\r\n  id: string;\r\n  data: string[];\r\n}\r\n\r\nconst FormMultiTextInput = (props: IFormMultiTextInputProps) => {\r\n  const { label, id, data } = props;\r\n  const [hovered, setHovered] = useState(Array(data.length).fill(0));\r\n  return (\r\n    <Card sx={{ border: \"none\", width: \"100%\", m: 1 }}>\r\n      <CardHeader title={label} />\r\n      <CardContent>\r\n        <Grid container spacing={2} mx=\"auto\">\r\n          {data.map((item, index) => {\r\n            return (\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  key={index}\r\n                  variant=\"outlined\"\r\n                  color={hovered[index] ? \"error\" : \"inherit\"}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    let cHovered = [...hovered];\r\n                    cHovered[index] = 0;\r\n                    setHovered(cHovered);\r\n                  }}\r\n                  onMouseOver={() => {\r\n                    let cHovered = [...hovered];\r\n                    cHovered[index] = 1;\r\n                    setHovered(cHovered);\r\n                  }}\r\n                >\r\n                  {hovered[index] ? (\r\n                    <>\r\n                      <Remove /> Delete\r\n                    </>\r\n                  ) : (\r\n                    item\r\n                  )}\r\n                </Button>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions>\r\n        <TextField\r\n          label=\"\"\r\n          id={id}\r\n          sx={{ marginLeft: \"auto\", width: \"100%\" }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton>\r\n                  <Add />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"standard\"\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormMultiTextInput;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, setPosition } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      setPosition(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          setPosition(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [setPosition]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import axios from \"axios\";\r\n\r\nexport const defaultAxiosInstance = axios.create({\r\n  timeout: 1000,\r\n});\r\n","import { defaultAxiosInstance } from \"../../axios\";\r\n\r\nexport type coord = { lat: number; lng: number };\r\n\r\nexport const getDistanceBetween2Coords = async (\r\n  coord1: coord,\r\n  coord2: coord\r\n) => {\r\n  const requestUrl = `https://routing.openstreetmap.de/routed-foot/route/v1/driving/${coord1.lng.toFixed(\r\n    5\r\n  )},${coord1.lat.toFixed(5)};${coord2.lng.toFixed(5)},${coord2.lat.toFixed(\r\n    5\r\n  )}?overview=false&geometries=polyline&steps=false`;\r\n\r\n  var distance = 0;\r\n\r\n  await defaultAxiosInstance.get(requestUrl).then((e) => {\r\n    distance = e.data.routes[0].distance;\r\n  });\r\n\r\n  return distance;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { coord, getDistanceBetween2Coords } from \"./helpers\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"mapsInput\" });\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(null);\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n  useEffect(() => {\r\n    if (selectionCoords)\r\n      getDistanceBetween2Coords(mainCoords as coord, selectionCoords).then(\r\n        (e) => {\r\n          setDistance((e / 1000).toFixed(3));\r\n        }\r\n      );\r\n  }, [selectionCoords, mainCoords, setDistance]);\r\n\r\n  return (\r\n    <Card sx={{ m: 1 }}>\r\n      <CardHeader title={`${distance} ${t(\"title\")}`} />\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={16}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={mainCoords} />\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            setPosition={setSelectionCoords}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","const mainCoord = { lat: 39.92069001103445, lng: 32.854006924076806 };\r\nexport default mainCoord;\r\n","import React from \"react\";\r\nimport { Grid, Button, Stack } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { ICandidate } from \"../../interfaces/Candidate\";\r\nimport { emptyCandidate } from \"./emptyCandidate\";\r\nimport FormInput from \"../../components/FormInput\";\r\nimport { FileUpload, SaveRounded } from \"@mui/icons-material\";\r\nimport FormMultiTextInput from \"../../components/FormMultiTextInput\";\r\nimport MapsInput from \"../../components/MapsInput\";\r\nimport mainCoord from \"../../mockData/coords\";\r\nimport ActionModal from \"../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ICandidateModalProps {\r\n  candidate?: ICandidate;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst mockPhones = [\"05000000050\", \"05000000051\"];\r\n\r\nconst mockEmails = [\"example@example.com\", \"example@example.com\"];\r\n\r\nconst mockPreviousJobs = [\"Job 1\", \"Job 2\"];\r\n\r\nconst mockDepartments = [\"Department 1\", \"Department 2\"];\r\n\r\nconst mockKeywords = [\"Keyword 1\", \"Keyword 2\"];\r\n\r\nconst CandidateModal = (props: ICandidateModalProps) => {\r\n  const { candidate, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.modal\" });\r\n  let form = useFormik({\r\n    initialValues: candidate ? { ...candidate } : { ...emptyCandidate },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <Grid container spacing={2} padding={2}>\r\n        <Grid item xs={12} md={4}>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.surname\")}\r\n            type=\"text\"\r\n            value={form.values.surname}\r\n            name=\"surname\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.address\")}\r\n            type=\"text\"\r\n            value={form.values.address}\r\n            name=\"address\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.extraAddress\")}\r\n            type=\"text\"\r\n            value={form.values.extraAddress}\r\n            name=\"extraAddress\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.zipCode\")}\r\n            type=\"text\"\r\n            value={form.values.zipCode}\r\n            name=\"zipCode\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.city\")}\r\n            type=\"text\"\r\n            value={form.values.city}\r\n            name=\"city\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.country\")}\r\n            type=\"text\"\r\n            value={form.values.country}\r\n            name=\"country\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.comment\")}\r\n            type=\"text\"\r\n            value={form.values.comment}\r\n            name=\"comment\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.salaryExpectation\")}\r\n            type=\"number\"\r\n            value={form.values.salaryExpectation}\r\n            name=\"salaryExpectation\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <FormMultiTextInput\r\n            label={t(\"form.phoneNumbers\")}\r\n            id=\"phone-numbers\"\r\n            data={mockPhones}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.emailAddresses\")}\r\n            id=\"email-addresses\"\r\n            data={mockEmails}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.previousJobs\")}\r\n            id=\"previous-jobs\"\r\n            data={mockPreviousJobs}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.departments\")}\r\n            id=\"departments\"\r\n            data={mockDepartments}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.keywords\")}\r\n            id=\"keywords\"\r\n            data={mockKeywords}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <MapsInput mainCoords={mainCoord} />\r\n          {form.values.id ? (\r\n            <Stack sx={{ m: 1 }} direction=\"row\" spacing={1}>\r\n              <Button variant=\"contained\" color=\"success\">\r\n                <SaveRounded /> {t(\"form.cv.download\")}\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                <FileUpload /> {t(\"form.cv.upload-new\")}\r\n              </Button>\r\n            </Stack>\r\n          ) : (\r\n            <Button sx={{ m: 1 }} variant=\"contained\" color=\"secondary\">\r\n              <FileUpload /> {t(\"form.cv.upload\")}\r\n            </Button>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CandidateModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport candidates from \"../../mockData/candidates\";\r\nimport CandidateModal from \"./CandidateModal\";\r\nimport { ICandidate } from \"../../interfaces/Candidate\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CandidatesTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.table\" });\r\n  const [isCandidateModalOpen, setIsCandidateModalOpen] =\r\n    useState<boolean>(false);\r\n  const [candidateModalCandidate, setCandidateModalCandidate] = useState<\r\n    ICandidate | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <CandidateModal\r\n        candidate={candidateModalCandidate}\r\n        isOpen={isCandidateModalOpen}\r\n        setIsOpen={setIsCandidateModalOpen}\r\n      />\r\n      <CRUDTable<ICandidate>\r\n        data={candidates}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"surname\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"surname\", \"city\"]}\r\n        setModalData={setCandidateModalCandidate}\r\n        setIsDataModalOpen={setIsCandidateModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CandidatesTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CandidatesTable from \"./CandidatesTable\";\r\n\r\nconst Candidates = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"candidates\",\r\n      },\r\n    });\r\n  });\r\n  return <CandidatesTable />;\r\n};\r\n\r\nexport default Candidates;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { resolve } from \"./helpers\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name) => (\r\n                <TableCell>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data\r\n              .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n              .map((item, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <Checkbox\r\n                      value={item.id}\r\n                      checked={selectedDatasId.includes(item.id)}\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          const _selectedDatasId = [...selectedDatasId];\r\n                          _selectedDatasId.push(item.id);\r\n                          setSelectedDatasId(_selectedDatasId);\r\n                        } else {\r\n                          const _selectedDatasId = [...selectedDatasId];\r\n                          _selectedDatasId.splice(\r\n                            _selectedDatasId.indexOf(item.id),\r\n                            1\r\n                          );\r\n                          setSelectedDatasId(_selectedDatasId);\r\n                        }\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  {keysToShow.map((key, index) => (\r\n                    <>\r\n                      <TableCell key={index}>\r\n                        {Object.keys(customComponent).includes(key)\r\n                          ? customComponent[key](item[key as keyof typeof item])\r\n                          : key.includes(\".\")\r\n                          ? resolve(key, item)\r\n                          : item[key as keyof typeof item]}\r\n                      </TableCell>\r\n                    </>\r\n                  ))}\r\n\r\n                  <TableCell>\r\n                    <Button\r\n                      sx={{ border: \"none !important\" }}\r\n                      color=\"warning\"\r\n                      variant=\"contained\"\r\n                      onClick={() => {\r\n                        setModalData(item);\r\n                        setIsDataModalOpen(true);\r\n                      }}\r\n                    >\r\n                      <BorderColor />\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n      <Stack padding={\"1rem\"}>\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","export function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { ICandidate } from \"../interfaces/Candidate\";\r\n\r\nconst candidates: ICandidate[] = [\r\n  { id: 1, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 2, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 3, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 4, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 5, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 6, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 7, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 8, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 9, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 10, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 11, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 12, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 13, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 14, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 15, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 16, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 17, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 18, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 19, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n];\r\n\r\nexport default candidates;\r\n"],"names":["emptyCandidate","id","name","surname","CVAddress","phoneNumbers","emailAdresses","address","extraAddress","zipCode","city","country","mapsCoord","creatorMember","previousJobs","skills","comment","salaryExpectation","departments","keywords","situation","props","label","data","useState","Array","length","fill","hovered","setHovered","Card","sx","border","width","m","CardHeader","title","CardContent","Grid","container","spacing","mx","map","item","index","xs","Button","variant","color","onMouseOut","cHovered","onMouseOver","Remove","CardActions","TextField","marginLeft","InputProps","endAdornment","InputAdornment","position","IconButton","Add","setPosition","useMapEvents","click","e","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","defaultAxiosInstance","axios","timeout","getDistanceBetween2Coords","coord1","coord2","requestUrl","lng","toFixed","lat","distance","get","then","routes","mainCoords","t","useTranslation","keyPrefix","selectionCoords","setSelectionCoords","setDistance","useEffect","MapContainer","center","zoom","style","height","scrollWheelZoom","TileLayer","attribution","url","mockPhones","mockEmails","mockPreviousJobs","mockDepartments","mockKeywords","candidate","isOpen","setIsOpen","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","values","saveFunction","padding","md","FormInput","type","value","onChange","handleChange","disabled","mainCoord","Stack","direction","SaveRounded","FileUpload","isCandidateModalOpen","setIsCandidateModalOpen","undefined","candidateModalCandidate","setCandidateModalCandidate","CRUDTable","candidates","cellNames","keysToShow","setModalData","setIsDataModalOpen","pageRedux","payload","children","open","onClose","top","left","transform","bgcolor","p","action","onClick","htmlColor","overflow","startIcon","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","Paper","boxShadow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","target","c","TableBody","slice","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","path","obj","split","reduce","prev","curr","BorderColor","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","ButtonGroup","DeleteForeverRounded","error","Boolean","htmlFor"],"sourceRoot":""}