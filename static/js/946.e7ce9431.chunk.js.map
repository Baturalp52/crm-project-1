{"version":3,"file":"static/js/946.e7ce9431.chunk.js","mappings":"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","sources":["Pages/Candidates/emptyCandidate.ts","components/FormMultiTextInput/index.tsx","components/MapsInput/LocationMarker.tsx","axios/index.ts","components/MapsInput/helpers.ts","components/MapsInput/index.tsx","mockData/coords.ts","Pages/Candidates/RightBar.tsx","Pages/Candidates/CandidatesTable.tsx","Pages/Candidates/index.tsx","components/FormInput/index.tsx","mockData/candidates.ts"],"sourcesContent":["export const emptyCandidate = {\r\n  id: 0,\r\n  name: \"\",\r\n  surname: \"\",\r\n  CVAddress: \"\",\r\n  phoneNumbers: [],\r\n  emailAdresses: [],\r\n  address: \"\",\r\n  extraAddress: \"\",\r\n  zipCode: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  mapsCoord: \"\",\r\n  creatorMember: {},\r\n  previousJobs: [],\r\n  skills: [],\r\n  comment: \"\",\r\n  salaryExpectation: 0,\r\n  departments: [],\r\n  keywords: [],\r\n  situation: \"free\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardHeader,\r\n  CardMedia,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Add, Remove } from \"@mui/icons-material\";\r\n\r\ninterface IFormMultiTextInputProps {\r\n  label: string;\r\n  id: string;\r\n  data: string[];\r\n}\r\n\r\nconst FormMultiTextInput = (props: IFormMultiTextInputProps) => {\r\n  const { label, id, data } = props;\r\n  const [hovered, setHovered] = useState(Array(data.length).fill(0));\r\n  return (\r\n    <Card sx={{ border: \"none\", width: \"100%\" }}>\r\n      <CardHeader title={label} />\r\n      <CardMedia>\r\n        <Stack padding={2} spacing={2} mx=\"auto\">\r\n          {data.map((item, index) => {\r\n            return (\r\n              <Button\r\n                key={index}\r\n                variant=\"outlined\"\r\n                color={hovered[index] ? \"error\" : \"inherit\"}\r\n                onMouseOut={() => {\r\n                  let cHovered = [...hovered];\r\n                  cHovered[index] = 0;\r\n                  setHovered(cHovered);\r\n                }}\r\n                onMouseOver={() => {\r\n                  let cHovered = [...hovered];\r\n                  cHovered[index] = 1;\r\n                  setHovered(cHovered);\r\n                }}\r\n              >\r\n                {hovered[index] ? (\r\n                  <>\r\n                    <Remove /> Delete\r\n                  </>\r\n                ) : (\r\n                  item\r\n                )}\r\n              </Button>\r\n            );\r\n          })}\r\n        </Stack>\r\n      </CardMedia>\r\n      <CardActions>\r\n        <TextField\r\n          label=\"\"\r\n          id={id}\r\n          sx={{ marginLeft: \"auto\", width: \"100%\" }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton>\r\n                  <Add />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"standard\"\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormMultiTextInput;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, setPosition } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      setPosition(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          setPosition(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [setPosition]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import axios from \"axios\";\r\n\r\nexport const defaultAxiosInstance = axios.create({\r\n  timeout: 1000,\r\n});\r\n","import { defaultAxiosInstance } from \"../../axios\";\r\n\r\nexport type coord = { lat: number; lng: number };\r\n\r\nexport const getDistanceBetween2Coords = async (\r\n  coord1: coord,\r\n  coord2: coord\r\n) => {\r\n  const requestUrl = `https://routing.openstreetmap.de/routed-foot/route/v1/driving/${coord1.lng.toFixed(\r\n    5\r\n  )},${coord1.lat.toFixed(5)};${coord2.lng.toFixed(5)},${coord2.lat.toFixed(\r\n    5\r\n  )}?overview=false&geometries=polyline&steps=false`;\r\n\r\n  var distance = 0;\r\n\r\n  await defaultAxiosInstance.get(requestUrl).then((e) => {\r\n    distance = e.data.routes[0].distance;\r\n  });\r\n  console.log(distance);\r\n\r\n  return distance;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { coord, getDistanceBetween2Coords } from \"./helpers\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords } = props;\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(null);\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n  useEffect(() => {\r\n    if (selectionCoords)\r\n      getDistanceBetween2Coords(mainCoords as coord, selectionCoords).then(\r\n        (e) => {\r\n          setDistance((e / 1000).toFixed(3));\r\n        }\r\n      );\r\n  }, [selectionCoords, mainCoords, setDistance]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title={`${distance} km(s) between the point.`} />\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={16}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={mainCoords}></Marker>\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            setPosition={setSelectionCoords}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","const mainCoord = { lat: 39.92069001103445, lng: 32.854006924076806 };\r\nexport default mainCoord;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { ICandidate } from \"../../mockData/interfaces/Candidate\";\r\nimport { emptyCandidate } from \"./emptyCandidate\";\r\nimport FormInput from \"../../components/FormInput\";\r\nimport { CloseRounded, FileUpload, SaveRounded } from \"@mui/icons-material\";\r\nimport FormMultiTextInput from \"../../components/FormMultiTextInput\";\r\nimport MapsInput from \"../../components/MapsInput\";\r\nimport mainCoord from \"../../mockData/coords\";\r\n\r\ninterface IRightBarProps {\r\n  candidate?: ICandidate;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst mockPhones = [\"05000000050\", \"05000000051\"];\r\n\r\nconst mockEmails = [\"example@example.com\", \"example@example.com\"];\r\n\r\nconst RightBar = (props: IRightBarProps) => {\r\n  const { candidate, isOpen, setIsOpen } = props;\r\n\r\n  let form = useFormik({\r\n    initialValues: candidate ? { ...candidate } : { ...emptyCandidate },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <Drawer anchor=\"right\" open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Box sx={{ width: 400, overflow: \"auto\" }} role=\"presentation\">\r\n        <Typography variant=\"h6\" display=\"flex\" padding={2}>\r\n          {form.values.id ? \"Edit Candidate\" : \"Add New\"}\r\n          <IconButton\r\n            sx={{ marginLeft: \"auto\", display: \"inline\" }}\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            <CloseRounded />\r\n          </IconButton>\r\n        </Typography>\r\n\r\n        <form onSubmit={form.handleSubmit}>\r\n          <List>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"id\"\r\n                type=\"number\"\r\n                value={form.values.id}\r\n                name=\"id\"\r\n                onChange={form.handleChange}\r\n                disabled\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Name\"\r\n                type=\"text\"\r\n                value={form.values.name}\r\n                name=\"name\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Surname\"\r\n                type=\"text\"\r\n                value={form.values.surname}\r\n                name=\"surname\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              {form.values.id ? (\r\n                <Stack direction=\"row\" spacing={1}>\r\n                  <Button variant=\"contained\" color=\"success\">\r\n                    <SaveRounded /> Download CV\r\n                  </Button>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    <FileUpload /> Upload New CV\r\n                  </Button>\r\n                </Stack>\r\n              ) : (\r\n                <Button variant=\"contained\" color=\"secondary\">\r\n                  <FileUpload /> Upload CV\r\n                </Button>\r\n              )}\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormMultiTextInput\r\n                label=\"Phone Numbers:\"\r\n                id=\"phone-numbers\"\r\n                data={mockPhones}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormMultiTextInput\r\n                label=\"E-mail Addresses:\"\r\n                id=\"email-addresses\"\r\n                data={mockEmails}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Address\"\r\n                type=\"text\"\r\n                value={form.values.address}\r\n                name=\"address\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Extra Address\"\r\n                type=\"text\"\r\n                value={form.values.extraAddress}\r\n                name=\"extraAddress\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Zip Code\"\r\n                type=\"text\"\r\n                value={form.values.zipCode}\r\n                name=\"zipCode\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"City\"\r\n                type=\"text\"\r\n                value={form.values.city}\r\n                name=\"city\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <MapsInput mainCoords={mainCoord} />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Country\"\r\n                type=\"text\"\r\n                value={form.values.country}\r\n                name=\"country\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Comment\"\r\n                type=\"text\"\r\n                value={form.values.comment}\r\n                name=\"comment\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label=\"Salary Expectation\"\r\n                type=\"number\"\r\n                value={form.values.salaryExpectation}\r\n                name=\"salaryExpectation\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        </form>\r\n        <Stack padding={2}>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Stack>\r\n      </Box>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default RightBar;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Checkbox,\r\n  ButtonGroup,\r\n  Button,\r\n  Stack,\r\n} from \"@mui/material\";\r\n\r\nimport candidates from \"../../mockData/candidates\";\r\nimport { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport RightBar from \"./RightBar\";\r\nimport { ICandidate } from \"../../mockData/interfaces/Candidate\";\r\n\r\nconst CandidatesTable = () => {\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedCandidatesId, setSelectedCandidatesId] = useState<number[]>(\r\n    []\r\n  );\r\n  const [isRightBarOpen, setIsRightBarOpen] = useState<boolean>(false);\r\n  const [rightBarCandidate, setRightBarCandidate] = useState<\r\n    ICandidate | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <RightBar\r\n        candidate={rightBarCandidate}\r\n        isOpen={isRightBarOpen}\r\n        setIsOpen={setIsRightBarOpen}\r\n      />\r\n      <Paper\r\n        sx={{\r\n          width: \"calc(100% - 40px)\",\r\n          marginLeft: \"auto\",\r\n          overflow: \"hidden\",\r\n          boxShadow: \"none\",\r\n        }}\r\n      >\r\n        <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <Checkbox\r\n                    value=\"all\"\r\n                    checked={candidates.length === selectedCandidatesId.length}\r\n                    onChange={(e) => {\r\n                      if (e.target.checked) {\r\n                        setSelectedCandidatesId(candidates.map((c) => c.id));\r\n                      } else setSelectedCandidatesId([]);\r\n                    }}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>id</TableCell>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Surname</TableCell>\r\n                <TableCell>City</TableCell>\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {candidates\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedCandidatesId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedCandidatesId = [\r\n                              ...selectedCandidatesId,\r\n                            ];\r\n                            _selectedCandidatesId.push(item.id);\r\n                            setSelectedCandidatesId(_selectedCandidatesId);\r\n                          } else {\r\n                            const _selectedCandidatesId = [\r\n                              ...selectedCandidatesId,\r\n                            ];\r\n                            _selectedCandidatesId.splice(\r\n                              _selectedCandidatesId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedCandidatesId(_selectedCandidatesId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{item.id}</TableCell>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.surname}</TableCell>\r\n                    <TableCell>{item.city}</TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setRightBarCandidate(item);\r\n                          setIsRightBarOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 100]}\r\n          component=\"div\"\r\n          count={candidates.length}\r\n          rowsPerPage={rowPerPage}\r\n          page={currentPage}\r\n          onPageChange={(e: unknown, newPage: number) => {\r\n            setCurrentPage(newPage);\r\n          }}\r\n          onRowsPerPageChange={(e) => {\r\n            setRowPerPage(+e.target.value);\r\n            setCurrentPage(0);\r\n          }}\r\n        />\r\n        <Stack padding={\"1rem\"}>\r\n          <ButtonGroup\r\n            sx={{ marginLeft: \"auto\" }}\r\n            aria-label=\"medium button group contained\"\r\n            variant=\"contained\"\r\n          >\r\n            <Button\r\n              sx={{ border: \"none !important\" }}\r\n              startIcon={<Add />}\r\n              color=\"success\"\r\n              onClick={() => {\r\n                setRightBarCandidate(undefined);\r\n                setIsRightBarOpen(true);\r\n              }}\r\n            >\r\n              Add New\r\n            </Button>\r\n            <Button\r\n              sx={{ border: \"none !important\" }}\r\n              startIcon={<DeleteForeverRounded />}\r\n              color=\"error\"\r\n            >\r\n              Delete\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Stack>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\nexport default CandidatesTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CandidatesTable from \"./CandidatesTable\";\r\n\r\nconst Candidates = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        headerTitle: \"Candidates\",\r\n        pageTitle: \"Candidates || CRM\",\r\n      },\r\n    });\r\n  });\r\n  return <CandidatesTable />;\r\n};\r\n\r\nexport default Candidates;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\" }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { ICandidate } from \"./interfaces/Candidate\";\r\n\r\nconst candidates: ICandidate[] = [\r\n  { id: 1, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 2, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 3, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 4, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 5, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 6, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 7, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 8, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 9, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 10, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 11, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 12, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 13, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 14, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 15, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 16, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 17, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 18, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 19, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n];\r\n\r\nexport default candidates;\r\n"],"names":["emptyCandidate","id","name","surname","CVAddress","phoneNumbers","emailAdresses","address","extraAddress","zipCode","city","country","mapsCoord","creatorMember","previousJobs","skills","comment","salaryExpectation","departments","keywords","situation","props","label","data","useState","Array","length","fill","hovered","setHovered","Card","sx","border","width","CardHeader","title","CardMedia","Stack","padding","spacing","mx","map","item","index","Button","variant","color","onMouseOut","cHovered","onMouseOver","Remove","CardActions","TextField","marginLeft","InputProps","endAdornment","InputAdornment","position","IconButton","Add","setPosition","useMapEvents","click","e","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","defaultAxiosInstance","axios","timeout","getDistanceBetween2Coords","coord1","coord2","requestUrl","lng","toFixed","lat","distance","get","then","routes","console","log","mainCoords","selectionCoords","setSelectionCoords","setDistance","useEffect","CardContent","MapContainer","center","zoom","style","height","scrollWheelZoom","TileLayer","attribution","url","mockPhones","mockEmails","candidate","isOpen","setIsOpen","form","useFormik","initialValues","onSubmit","enableReinitialize","Drawer","anchor","open","onClose","Box","overflow","role","Typography","display","values","onClick","CloseRounded","handleSubmit","List","ListItem","FormInput","type","value","onChange","handleChange","disabled","direction","SaveRounded","FileUpload","mainCoord","startIcon","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedCandidatesId","setSelectedCandidatesId","isRightBarOpen","setIsRightBarOpen","undefined","rightBarCandidate","setRightBarCandidate","Paper","boxShadow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","candidates","target","c","TableBody","includes","_selectedCandidatesId","push","splice","indexOf","BorderColor","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","ButtonGroup","DeleteForeverRounded","pageRedux","payload","headerTitle","pageTitle","error","Boolean","htmlFor"],"sourceRoot":""}