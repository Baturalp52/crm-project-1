{"version":3,"file":"static/js/167.2e9b0585.chunk.js","mappings":"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","sources":["Pages/Companies/emptyCompany.ts","Pages/Companies/CompanyModal.tsx","Pages/Companies/CompaniesTable.tsx","Pages/Companies/index.tsx","components/ActionModal/index.tsx","components/CRUDTable/index.tsx","components/FormInput/index.tsx","mockData/companies.ts"],"sourcesContent":["export const emptyCompany = {\r\n  id: 0,\r\n  name: \"\",\r\n  address: \"\",\r\n  city: \"\",\r\n  sector: \"\",\r\n  HRMembers: [],\r\n  jobs: [],\r\n};\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { emptyCompany } from \"./emptyCompany\";\r\nimport FormInput from \"../../components/FormInput\";\r\nimport { ICompany } from \"../../interfaces/Company\";\r\nimport ActionModal from \"../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ICompanyModalProps {\r\n  company?: ICompany;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst CompanyModal = (props: ICompanyModalProps) => {\r\n  const { company, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.modal\" });\r\n\r\n  let form = useFormik({\r\n    initialValues: company ? { ...company } : { ...emptyCompany },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <List>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.address\")}\r\n            type=\"text\"\r\n            value={form.values.address}\r\n            name=\"address\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.city\")}\r\n            type=\"text\"\r\n            value={form.values.city}\r\n            name=\"city\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.sector\")}\r\n            type=\"text\"\r\n            value={form.values.sector}\r\n            name=\"sector\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CompanyModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport companies from \"../../mockData/companies\";\r\nimport CompanyModal from \"./CompanyModal\";\r\nimport { ICompany } from \"../../interfaces/Company\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CompanysTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.table\" });\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState<boolean>(false);\r\n  const [companyModalCompany, setCompanyModalCompany] = useState<\r\n    ICompany | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <CompanyModal\r\n        company={companyModalCompany}\r\n        isOpen={isCompanyModalOpen}\r\n        setIsOpen={setIsCompanyModalOpen}\r\n      />\r\n      <CRUDTable<ICompany>\r\n        data={companies}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"city\"]}\r\n        setModalData={setCompanyModalCompany}\r\n        setIsDataModalOpen={setIsCompanyModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CompanysTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CompaniesTable from \"./CompaniesTable\";\r\n\r\nconst Companies = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"companies\",\r\n      },\r\n    });\r\n  });\r\n  return <CompaniesTable />;\r\n};\r\n\r\nexport default Companies;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name) => (\r\n                <TableCell>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data\r\n              .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n              .map((item, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <Checkbox\r\n                      value={item.id}\r\n                      checked={selectedDatasId.includes(item.id)}\r\n                      onChange={(e) => {\r\n                        if (e.target.checked) {\r\n                          const _selectedDatasId = [...selectedDatasId];\r\n                          _selectedDatasId.push(item.id);\r\n                          setSelectedDatasId(_selectedDatasId);\r\n                        } else {\r\n                          const _selectedDatasId = [...selectedDatasId];\r\n                          _selectedDatasId.splice(\r\n                            _selectedDatasId.indexOf(item.id),\r\n                            1\r\n                          );\r\n                          setSelectedDatasId(_selectedDatasId);\r\n                        }\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  {keysToShow.map((key) => (\r\n                    <>\r\n                      <TableCell>\r\n                        {Object.keys(customComponent).includes(key)\r\n                          ? customComponent[key](item[key as keyof typeof item])\r\n                          : item[key as keyof typeof item]}\r\n                      </TableCell>\r\n                    </>\r\n                  ))}\r\n\r\n                  <TableCell>\r\n                    <Button\r\n                      sx={{ border: \"none !important\" }}\r\n                      color=\"warning\"\r\n                      variant=\"contained\"\r\n                      onClick={() => {\r\n                        setModalData(item);\r\n                        setIsDataModalOpen(true);\r\n                      }}\r\n                    >\r\n                      <BorderColor />\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n      <Stack padding={\"1rem\"}>\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { ICompany } from \"../interfaces/Company\";\r\n\r\nconst companies: ICompany[] = [\r\n  { id: 1, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 2, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 3, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 4, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 5, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 6, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 7, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 8, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 9, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 10, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 11, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 12, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 13, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 14, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 15, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 16, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 17, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 18, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 19, name: \"Example Company\", city: \"Ankara\" },\r\n];\r\n\r\nexport default companies;\r\n"],"names":["emptyCompany","id","name","address","city","sector","HRMembers","jobs","props","company","isOpen","setIsOpen","t","useTranslation","keyPrefix","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","title","values","saveFunction","List","ListItem","FormInput","label","type","value","onChange","handleChange","disabled","useState","isCompanyModalOpen","setIsCompanyModalOpen","undefined","companyModalCompany","setCompanyModalCompany","CRUDTable","data","companies","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","CompaniesTable","children","open","onClose","sx","position","top","left","transform","width","height","bgcolor","border","p","color","action","onClick","htmlColor","overflow","marginLeft","startIcon","variant","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","boxShadow","maxHeight","stickyHeader","checked","length","e","target","map","c","slice","item","index","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","rowsPerPageOptions","component","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","padding","error","Boolean","m","htmlFor"],"sourceRoot":""}