{"version":3,"file":"static/js/973.9f35724f.chunk.js","mappings":"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","sources":["Pages/Companies/emptyCompany.ts","Pages/Companies/CompanyModal/index.tsx","Pages/Companies/CompaniesTable.tsx","Pages/Companies/index.tsx","components/ActionModal/index.tsx","components/SearchInput/index.tsx","components/CRUDTable/SearchBar/index.tsx","components/CRUDTable/index.tsx","components/CRUDTable/helpers.ts","components/FormDropdown/index.tsx","components/FormInput/index.tsx","mockData/companies.ts"],"sourcesContent":["export const emptyCompany = {\r\n  id: 0,\r\n  name: \"\",\r\n  address: \"\",\r\n  city: \"\",\r\n  sector: \"\",\r\n  HRMembers: [],\r\n  jobs: [],\r\n};\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { emptyCompany } from \"../emptyCompany\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport { ICompany } from \"../../../interfaces/Company\";\r\nimport ActionModal from \"../../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ICompanyModalProps {\r\n  company?: ICompany;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst CompanyModal = (props: ICompanyModalProps) => {\r\n  const { company, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.modal\" });\r\n\r\n  let form = useFormik({\r\n    initialValues: company ? { ...company } : { ...emptyCompany },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <List>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.address\")}\r\n            type=\"text\"\r\n            value={form.values.address}\r\n            name=\"address\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.city\")}\r\n            type=\"text\"\r\n            value={form.values.city}\r\n            name=\"city\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.sector\")}\r\n            type=\"text\"\r\n            value={form.values.sector}\r\n            name=\"sector\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CompanyModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport companies from \"../../mockData/companies\";\r\nimport CompanyModal from \"./CompanyModal\";\r\nimport { ICompany } from \"../../interfaces/Company\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CompanysTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.table\" });\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState<boolean>(false);\r\n  const [companyModalCompany, setCompanyModalCompany] = useState<\r\n    ICompany | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <CompanyModal\r\n        company={companyModalCompany}\r\n        isOpen={isCompanyModalOpen}\r\n        setIsOpen={setIsCompanyModalOpen}\r\n      />\r\n      <CRUDTable<ICompany>\r\n        data={companies}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"city\"]}\r\n        setModalData={setCompanyModalCompany}\r\n        setIsDataModalOpen={setIsCompanyModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CompanysTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CompaniesTable from \"./CompaniesTable\";\r\n\r\nconst Companies = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"companies\",\r\n      },\r\n    });\r\n  });\r\n  return <CompaniesTable />;\r\n};\r\n\r\nexport default Companies;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { Input, InputAdornment } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SearchInput = (props: { onChange: (e: any) => void }) => {\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"searchInput\" });\r\n  const { onChange } = props;\r\n  return (\r\n    <Input\r\n      type=\"search\"\r\n      onChange={onChange}\r\n      startAdornment={\r\n        <InputAdornment position=\"start\">\r\n          <Search />\r\n        </InputAdornment>\r\n      }\r\n      placeholder={t(\"placeholder\")}\r\n      sx={{ width: \"40em\", mx: \"auto\" }}\r\n    ></Input>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport SearchInput from \"../../SearchInput\";\r\nimport FormDropdown from \"../../FormDropdown\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ISearchBarProps {\r\n  filter: string | number;\r\n  setFilter: (filter: string) => void;\r\n  filters: string[];\r\n  search: (e: any) => void;\r\n}\r\n\r\nconst SearchBar = (props: ISearchBarProps) => {\r\n  const { filter, setFilter, filters, search } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.search-bar\",\r\n  });\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ mr: \"auto\", width: \"45%\", ml: 2 }}>\r\n      <Grid item xs={6} sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <SearchInput\r\n          onChange={(e: any) => {\r\n            if (Boolean(filter)) search(e);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6} sx={{ display: \"flex\" }}>\r\n        <FormDropdown<string>\r\n          label={t(\"label\")}\r\n          handleChange={(e) => {\r\n            setFilter(e.target.value);\r\n          }}\r\n          datas={filters}\r\n          defaultValue={t(\"select-filter\")}\r\n          dataToValue={(item) => t(`filters.${item}`)}\r\n          selectedValue={filter}\r\n          width=\"45%\"\r\n          getValue={(data) => data}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { resolve } from \"./helpers\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n  filters?: string[];\r\n  search?: (e: any) => void;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n    filters,\r\n    search,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  const [filter, setFilter] = useState<number | string>(0);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <Stack\r\n        padding={1}\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        {filters && search && (\r\n          <SearchBar\r\n            filter={filter}\r\n            setFilter={setFilter}\r\n            filters={filters}\r\n            search={search}\r\n          />\r\n        )}\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name, index) => (\r\n                <TableCell key={index}>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.length > 0 ? (\r\n              data\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell key={index}>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedDatasId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.push(item.id);\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          } else {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.splice(\r\n                              _selectedDatasId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    {keysToShow.map((key, index) => (\r\n                      <>\r\n                        <TableCell key={index}>\r\n                          {Object.keys(customComponent).includes(key)\r\n                            ? customComponent[key](\r\n                                item[key as keyof typeof item]\r\n                              )\r\n                            : key.includes(\".\")\r\n                            ? resolve(key, item)\r\n                            : item[key as keyof typeof item]}\r\n                        </TableCell>\r\n                      </>\r\n                    ))}\r\n\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setModalData(item);\r\n                          setIsDataModalOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={cellNames.length + 1} align=\"center\">\r\n                  {t(\"no-data\")}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","export function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\ninterface IFormDropdownProps<DataType> {\r\n  label: string;\r\n  handleChange: (e: any) => void;\r\n  datas: DataType[];\r\n  defaultValue: string;\r\n  dataToValue: (data: DataType) => string;\r\n  selectedValue: number | string;\r\n  disabled?: boolean;\r\n  width?: string;\r\n  getValue: (data: DataType) => string | number;\r\n}\r\n\r\nconst FormDropdown = <DataType extends { id: number } | string>(\r\n  props: IFormDropdownProps<DataType>\r\n) => {\r\n  const {\r\n    label,\r\n    handleChange,\r\n    defaultValue,\r\n    datas,\r\n    dataToValue,\r\n    selectedValue,\r\n    disabled,\r\n    width,\r\n    getValue,\r\n  } = props;\r\n  return (\r\n    <FormControl disabled={disabled} sx={{ width: \"100%\" || width, m: 1 }}>\r\n      <InputLabel>{label}</InputLabel>\r\n\r\n      <Select value={selectedValue} label={label} onChange={handleChange}>\r\n        <MenuItem value={0}>\r\n          <em>{defaultValue}</em>\r\n        </MenuItem>\r\n        {datas.map((data: DataType, index) => (\r\n          <MenuItem key={index} value={getValue(data)}>\r\n            {dataToValue(data)}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormDropdown;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { ICompany } from \"../interfaces/Company\";\r\n\r\nconst companies: ICompany[] = [\r\n  { id: 1, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 2, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 3, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 4, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 5, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 6, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 7, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 8, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 9, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 10, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 11, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 12, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 13, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 14, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 15, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 16, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 17, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 18, name: \"Example Company\", city: \"Ankara\" },\r\n  { id: 19, name: \"Example Company\", city: \"Ankara\" },\r\n];\r\n\r\nexport default companies;\r\n"],"names":["emptyCompany","id","name","address","city","sector","HRMembers","jobs","props","company","isOpen","setIsOpen","t","useTranslation","keyPrefix","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","title","values","saveFunction","List","ListItem","FormInput","label","type","value","onChange","handleChange","disabled","useState","isCompanyModalOpen","setIsCompanyModalOpen","undefined","companyModalCompany","setCompanyModalCompany","CRUDTable","data","companies","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","CompaniesTable","children","open","onClose","sx","position","top","left","transform","width","height","bgcolor","border","p","color","action","onClick","htmlColor","overflow","marginLeft","startIcon","variant","Input","startAdornment","InputAdornment","Search","placeholder","mx","filter","setFilter","filters","search","Grid","container","spacing","mr","ml","item","xs","display","alignItems","e","Boolean","FormDropdown","target","datas","defaultValue","dataToValue","selectedValue","getValue","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","Paper","boxShadow","Stack","padding","direction","justifyContent","ButtonGroup","Button","Add","DeleteForeverRounded","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","length","map","c","index","TableBody","slice","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","path","obj","split","reduce","prev","curr","BorderColor","colSpan","align","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","m","error","htmlFor"],"sourceRoot":""}