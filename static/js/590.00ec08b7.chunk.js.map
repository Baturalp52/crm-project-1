{"version":3,"file":"static/js/590.00ec08b7.chunk.js","mappings":"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","sources":["Pages/Candidates/emptyCandidate.ts","components/FormMultiTextInput/index.tsx","Pages/Candidates/CandidateModal/SkillModal.tsx","Pages/Candidates/CandidateModal/Skills.tsx","Pages/Candidates/CandidateModal/SendMessageModal/datas.ts","Pages/Candidates/CandidateModal/SendMessageModal/index.tsx","Pages/Candidates/CandidateModal/SituationSwitch.tsx","Pages/Candidates/CandidateModal/index.tsx","Pages/Candidates/CandidatesTable.tsx","Pages/Candidates/index.tsx","components/MapsInput/LocationMarker.tsx","components/MapsInput/index.tsx","helpers/calculateDistance.ts","mockData/jobs.ts"],"sourcesContent":["export const emptyCandidate = {\r\n  id: 0,\r\n  name: \"\",\r\n  surname: \"\",\r\n  CVAddress: \"\",\r\n  phoneNumbers: [],\r\n  emailAdresses: [],\r\n  address: \"\",\r\n  extraAddress: \"\",\r\n  zipCode: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  mapsCoord: undefined,\r\n  creatorMember: {},\r\n  previousJobs: [],\r\n  skills: [],\r\n  comment: \"\",\r\n  salaryExpectation: 0,\r\n  departments: [],\r\n  keywords: [],\r\n  diplomas: [],\r\n  placedJob: undefined,\r\n  situation: false,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  InputAdornment,\r\n  Grid,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Add, Remove } from \"@mui/icons-material\";\r\n\r\ninterface IFormMultiTextInputProps {\r\n  label: string;\r\n  id: string;\r\n  data: string[];\r\n  addNew: (data: string) => void;\r\n  deleteItem: (index: number) => void;\r\n}\r\n\r\nconst FormMultiTextInput = (props: IFormMultiTextInputProps) => {\r\n  const { label, id, data, addNew, deleteItem } = props;\r\n  const [hovered, setHovered] = useState(Array(data.length).fill(0));\r\n  const [addNewValue, setAddNewValue] = useState<string>(\"\");\r\n  return (\r\n    <Card sx={{ border: \"none\", width: \"100%\", m: 1 }}>\r\n      <CardHeader title={label} />\r\n      <CardContent>\r\n        <Grid container spacing={2} mx=\"auto\">\r\n          {data.length > 0\r\n            ? data.map((item, index) => {\r\n                return (\r\n                  <Grid key={index} item xs={12}>\r\n                    <Button\r\n                      key={index}\r\n                      variant=\"outlined\"\r\n                      color={hovered[index] ? \"error\" : \"inherit\"}\r\n                      sx={{\r\n                        width: \"100%\",\r\n                      }}\r\n                      onMouseOut={() => {\r\n                        let cHovered = [...hovered];\r\n                        cHovered[index] = 0;\r\n                        setHovered(cHovered);\r\n                      }}\r\n                      onMouseOver={() => {\r\n                        let cHovered = [...hovered];\r\n                        cHovered[index] = 1;\r\n                        setHovered(cHovered);\r\n                      }}\r\n                      onClick={() => {\r\n                        deleteItem(index);\r\n                      }}\r\n                    >\r\n                      {hovered[index] ? (\r\n                        <>\r\n                          <Remove /> Delete\r\n                        </>\r\n                      ) : (\r\n                        item\r\n                      )}\r\n                    </Button>\r\n                  </Grid>\r\n                );\r\n              })\r\n            : \"No data\"}\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions>\r\n        <TextField\r\n          label=\"\"\r\n          id={id}\r\n          value={addNewValue}\r\n          onChange={(e) => setAddNewValue(e.target.value)}\r\n          onKeyUpCapture={(e) => {\r\n            if (e.which === 13) {\r\n              addNew(addNewValue);\r\n              setAddNewValue(\"\");\r\n            }\r\n          }}\r\n          sx={{ marginLeft: \"auto\", width: \"100%\" }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onClick={() => {\r\n                    addNew(addNewValue);\r\n                    setAddNewValue(\"\");\r\n                  }}\r\n                >\r\n                  <Add />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"standard\"\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormMultiTextInput;\r\n","import React from \"react\";\r\nimport { Box, Button, Modal } from \"@mui/material\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport { Save } from \"@mui/icons-material\";\r\n\r\ninterface ISkillModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: (state: boolean) => void;\r\n  addSkill: (skill: ISkill) => void;\r\n  editSkill: (skill: ISkill) => void;\r\n  action: \"add\" | \"edit\";\r\n  modalSkill: ISkill;\r\n  setModalSkill: (skill: ISkill) => void;\r\n}\r\n\r\nconst SkillModal = (props: ISkillModalProps) => {\r\n  const {\r\n    isOpen,\r\n    setIsOpen,\r\n    addSkill,\r\n    editSkill,\r\n    action,\r\n    modalSkill,\r\n    setModalSkill,\r\n  } = props;\r\n  const { t } = useTranslation(\"pages\", {\r\n    keyPrefix: \"candidates.modal.form.skills\",\r\n  });\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={() => {\r\n        setIsOpen(false);\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          textAlign: \"center\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 2,\r\n        }}\r\n      >\r\n        <FormInput\r\n          label={t(\"name\")}\r\n          type=\"text\"\r\n          value={modalSkill.name}\r\n          name=\"skill-name\"\r\n          onChange={(e) => {\r\n            const prevSkill = { ...modalSkill };\r\n            prevSkill.name = e.target.value;\r\n            setModalSkill(prevSkill);\r\n          }}\r\n        />\r\n        <FormInput\r\n          label={t(\"skill-level\")}\r\n          type=\"text\"\r\n          value={modalSkill.level}\r\n          name=\"skill-level\"\r\n          onChange={(e) => {\r\n            const prevSkill = { ...modalSkill };\r\n            prevSkill.level = e.target.value;\r\n            setModalSkill(prevSkill);\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"success\"\r\n          onClick={() => {\r\n            action === \"add\" ? addSkill(modalSkill) : editSkill(modalSkill);\r\n            setIsOpen(false);\r\n          }}\r\n        >\r\n          <Save sx={{ mr: 1 }} />\r\n          {t(\"save-skill\")}\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SkillModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\nimport { Clear, Edit } from \"@mui/icons-material\";\r\nimport SkillModal from \"./SkillModal\";\r\n\r\ninterface ISkillsProps {\r\n  skills: ISkill[];\r\n  addSkill: (skill: ISkill) => void;\r\n  removeSkill: (skill: ISkill) => void;\r\n  editSkill: (skill: ISkill) => void;\r\n}\r\n\r\nconst Skills = (props: ISkillsProps) => {\r\n  const { t } = useTranslation(\"pages\", {\r\n    keyPrefix: \"candidates.modal.form.skills\",\r\n  });\r\n  const { skills, removeSkill, editSkill, addSkill } = props;\r\n  const [isSkillModalOpen, setIsSkillModalOpen] = useState<boolean>(false);\r\n  const [modalAction, setModalAction] = useState<\"add\" | \"edit\">(\"add\");\r\n  const [modalSkill, setModalSkill] = useState<ISkill>({\r\n    id: 0,\r\n    name: \"\",\r\n    level: \"\",\r\n  });\r\n  return (\r\n    <>\r\n      <SkillModal\r\n        isOpen={isSkillModalOpen}\r\n        setIsOpen={setIsSkillModalOpen}\r\n        addSkill={addSkill}\r\n        editSkill={editSkill}\r\n        action={modalAction}\r\n        modalSkill={modalSkill}\r\n        setModalSkill={setModalSkill}\r\n      />\r\n      <Card sx={{ border: \"none\", width: \"100%\", m: 1 }}>\r\n        <CardHeader title={t(\"title\")} />\r\n        <CardContent>\r\n          <Grid container>\r\n            {skills.map((skill, index) => (\r\n              <Grid key={index} item xs={12} sx={{ display: \"flex\" }}>\r\n                <Tooltip title={t(\"level\") + skill.level} placement=\"top\">\r\n                  <span>{skill.name}</span>\r\n                </Tooltip>\r\n                <IconButton\r\n                  sx={{ ml: \"auto\" }}\r\n                  onClick={() => {\r\n                    setModalAction(\"edit\");\r\n                    setModalSkill(skill);\r\n                    setIsSkillModalOpen(true);\r\n                  }}\r\n                >\r\n                  <Edit />\r\n                </IconButton>\r\n                <IconButton\r\n                  sx={{ ml: 1 }}\r\n                  onClick={() => {\r\n                    removeSkill(skill);\r\n                  }}\r\n                >\r\n                  <Clear />\r\n                </IconButton>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            onClick={() => {\r\n              setModalAction(\"add\");\r\n              setModalSkill({\r\n                id: 0,\r\n                name: \"\",\r\n                level: \"\",\r\n              });\r\n              setIsSkillModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add-new-skill\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","const templateDatas = {\r\n  sms: [\r\n    {\r\n      id: 1,\r\n      name: \"SMS Template 1\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"SMS Template 2\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"SMS Template 3\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n  ],\r\n  email: [\r\n    {\r\n      id: 1,\r\n      name: \"E-Mail Template 1\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"E-Mail Template 2\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"E-Mail Template 3\",\r\n      template:\r\n        \"Hello %name%. This message is sent by template 1. You can add other properties like: %city%, %country%, %requestedJob.name%\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default templateDatas;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  FormControl,\r\n  IconButton,\r\n  InputLabel,\r\n  MenuItem,\r\n  Modal,\r\n  Paper,\r\n  Select,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport templateDatas from \"./datas\";\r\nimport { ICandidate } from \"../../../../interfaces/Candidate\";\r\nimport { Close, Send } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport resolve from \"../../../../helpers/resolve\";\r\n\r\ninterface ISendMessageModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: (val: boolean) => void;\r\n  messageType: \"sms\" | \"email\";\r\n  candidate: ICandidate;\r\n}\r\n\r\ninterface ITemplate {\r\n  id: number;\r\n  name: string;\r\n  template: string;\r\n}\r\n\r\nconst SendMessageModal = (props: ISendMessageModalProps) => {\r\n  const { isOpen, setIsOpen, messageType, candidate } = props;\r\n  const [template, setTemplate] = useState<ITemplate>({\r\n    id: 0,\r\n    name: \"\",\r\n    template: \"\",\r\n  });\r\n  const { t } = useTranslation(\"pages\", {\r\n    keyPrefix: \"candidates.modal.send-message\",\r\n  });\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={() => {\r\n        setTemplate({\r\n          id: 0,\r\n          name: \"\",\r\n          template: \"\",\r\n        });\r\n        setIsOpen(false);\r\n      }}\r\n    >\r\n      <Paper\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"60%\",\r\n          height: \"55%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 2,\r\n        }}\r\n      >\r\n        <Stack mb={5}>\r\n          <IconButton\r\n            sx={{ ml: \"auto\" }}\r\n            onClick={() => {\r\n              setTemplate({\r\n                id: 0,\r\n                name: \"\",\r\n                template: \"\",\r\n              });\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n        </Stack>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"select-temp-label\">{t(\"template\")}</InputLabel>\r\n          <Select\r\n            value={template.id}\r\n            labelId=\"select-temp-label\"\r\n            id=\"select-temp\"\r\n            label=\"Template\"\r\n            onChange={(e) => {\r\n              setTemplate(\r\n                e.target.value\r\n                  ? templateDatas[messageType].filter(\r\n                      (item: any) => item.id === e.target.value\r\n                    )[0]\r\n                  : {\r\n                      id: 0,\r\n                      name: \"\",\r\n                      template: \"\",\r\n                    }\r\n              );\r\n            }}\r\n          >\r\n            <MenuItem value={0}> {t(\"select-template\")} </MenuItem>\r\n            {templateDatas[messageType].map((temp, index) => (\r\n              <MenuItem key={index} value={temp.id}>\r\n                {temp.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        {Boolean(template.id) && (\r\n          <>\r\n            <Card sx={{ mt: 3 }}>\r\n              <CardHeader title={template.name} />\r\n              <CardContent sx={{ lineHeight: 2 }}>\r\n                {template.template\r\n                  .split(/%(\\w+|\\w+.\\w+)%/g)\r\n                  .map((item, index) => {\r\n                    return index % 2 === 0 ? (\r\n                      item\r\n                    ) : (\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        component=\"span\"\r\n                        color=\"white\"\r\n                        sx={{\r\n                          backgroundColor: \"error.main\",\r\n                          borderRadius: \"3px\",\r\n                          padding: 0.3,\r\n                          mx: 1,\r\n                          display: \"inline-block\",\r\n                        }}\r\n                      >\r\n                        {resolve(item, candidate)}\r\n                      </Typography>\r\n                    );\r\n                  })}\r\n              </CardContent>\r\n            </Card>\r\n            <Stack mt={3}>\r\n              <Button\r\n                endIcon={<Send />}\r\n                sx={{ ml: \"auto\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setTemplate({\r\n                    id: 0,\r\n                    name: \"\",\r\n                    template: \"\",\r\n                  });\r\n                  setIsOpen(false);\r\n                }}\r\n              >\r\n                {t(\"send\")}\r\n              </Button>\r\n            </Stack>\r\n          </>\r\n        )}\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SendMessageModal;\r\n","import { Check, Close } from \"@mui/icons-material\";\r\nimport { Switch, FormControlLabel } from \"@mui/material\";\r\nconst SituationSwitch = (props: any) => {\r\n  const { label } = props;\r\n  return (\r\n    <FormControlLabel\r\n      value=\"start\"\r\n      control={\r\n        <Switch\r\n          {...props}\r\n          checkedIcon={\r\n            <Check\r\n              sx={{\r\n                backgroundColor: \"success.main\",\r\n                color: \"white\",\r\n                borderRadius: \"50%\",\r\n              }}\r\n            />\r\n          }\r\n          icon={\r\n            <Close\r\n              sx={{\r\n                backgroundColor: \"error.main\",\r\n                color: \"white\",\r\n                borderRadius: \"50%\",\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      }\r\n      label={label}\r\n      labelPlacement=\"start\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SituationSwitch;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Button, Stack } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { ICandidate } from \"../../../interfaces/Candidate\";\r\nimport { emptyCandidate } from \"../emptyCandidate\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport { Email, FileUpload, Message, SaveRounded } from \"@mui/icons-material\";\r\nimport FormMultiTextInput from \"../../../components/FormMultiTextInput\";\r\nimport MapsInput from \"../../../components/MapsInput\";\r\nimport ActionModal from \"../../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Skills from \"./Skills\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\nimport SendMessageModal from \"./SendMessageModal\";\r\nimport FormDropdown from \"../../../components/FormDropdown\";\r\nimport { IJob } from \"../../../interfaces/Job\";\r\nimport jobs from \"../../../mockData/jobs\";\r\nimport SituationSwitch from \"./SituationSwitch\";\r\n\r\ninterface ICandidateModalProps {\r\n  candidate?: ICandidate;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst multiTextInputSections = [\r\n  \"phoneNumbers\",\r\n  \"emailAdresses\",\r\n  \"previousJobs\",\r\n  \"departments\",\r\n  \"keywords\",\r\n  \"diplomas\",\r\n];\r\n\r\nconst CandidateModal = (props: ICandidateModalProps) => {\r\n  const { candidate, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.modal\" });\r\n  let form = useFormik({\r\n    initialValues: candidate ? { ...candidate } : { ...emptyCandidate },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  const [isSendMessageModalOpen, setIsSendMessageModalOpen] =\r\n    useState<boolean>(false);\r\n  const [sendMessageModalType, setSendMessageModalType] = useState<\r\n    \"sms\" | \"email\"\r\n  >(\"sms\");\r\n\r\n  const addToFormArray = (data: string, key: string) => {\r\n    const arr: string[] = form.values[\r\n      key as keyof typeof form.values\r\n    ] as string[];\r\n    arr.push(data);\r\n    form.setFieldValue(key, arr);\r\n  };\r\n  const deleteFromArray = (index: number, key: string) => {\r\n    const arr: string[] = form.values[\r\n      key as keyof typeof form.values\r\n    ] as string[];\r\n    arr.splice(index, 1);\r\n    form.setFieldValue(key, arr);\r\n  };\r\n\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <SendMessageModal\r\n        isOpen={isSendMessageModalOpen}\r\n        setIsOpen={setIsSendMessageModalOpen}\r\n        candidate={form.values}\r\n        messageType={sendMessageModalType}\r\n      />\r\n      <Grid container spacing={2} padding={2}>\r\n        <Grid item xs={12} md={4}>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.surname\")}\r\n            type=\"text\"\r\n            value={form.values.surname}\r\n            name=\"surname\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.address\")}\r\n            type=\"text\"\r\n            value={form.values.address}\r\n            name=\"address\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.extraAddress\")}\r\n            type=\"text\"\r\n            value={form.values.extraAddress}\r\n            name=\"extraAddress\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.zipCode\")}\r\n            type=\"text\"\r\n            value={form.values.zipCode}\r\n            name=\"zipCode\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.city\")}\r\n            type=\"text\"\r\n            value={form.values.city}\r\n            name=\"city\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.country\")}\r\n            type=\"text\"\r\n            value={form.values.country}\r\n            name=\"country\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.comment\")}\r\n            type=\"text\"\r\n            value={form.values.comment}\r\n            name=\"comment\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.salaryExpectation\")}\r\n            type=\"number\"\r\n            value={form.values.salaryExpectation}\r\n            name=\"salaryExpectation\"\r\n            onChange={form.handleChange}\r\n          />\r\n\r\n          <SituationSwitch\r\n            disableRipple\r\n            color=\"success\"\r\n            checked={form.values.situation}\r\n            onChange={() => {\r\n              form.setFieldValue(\"situation\", !form.values.situation);\r\n            }}\r\n            label={t(\"form.situation\").toString()}\r\n          />\r\n\r\n          {form.values.situation && (\r\n            <FormDropdown<IJob>\r\n              label={t(\"form.placed-job\")}\r\n              handleChange={(e) => {\r\n                form.setFieldValue(\r\n                  \"placedJob\",\r\n                  jobs.filter((item) => item.id === e.target.value)[0]\r\n                );\r\n              }}\r\n              datas={jobs}\r\n              defaultValue={t(\"form.placed-job\")}\r\n              selectedValue={\r\n                form.values.placedJob ? form.values.placedJob.id : 0\r\n              }\r\n              dataToValue={(item) => `${item.id} - ${item.name}`}\r\n              getValue={(item) => item.id}\r\n            />\r\n          )}\r\n\r\n          <Skills\r\n            skills={form.values.skills || []}\r\n            addSkill={(skill: ISkill) => {\r\n              const prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills.push(skill);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n            editSkill={(skill: ISkill) => {\r\n              let prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills = prevSkills.filter((item) => item.id !== skill.id);\r\n              prevSkills.push(skill);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n            removeSkill={(skill: ISkill) => {\r\n              let prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills = prevSkills.filter((item) => item.id !== skill.id);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          {multiTextInputSections.map((item, index) => (\r\n            <FormMultiTextInput\r\n              key={index}\r\n              label={t(\"form.\" + item)}\r\n              id={item}\r\n              data={form.values[item as keyof typeof form.values] as string[]}\r\n              addNew={(data) => {\r\n                addToFormArray(data, item);\r\n              }}\r\n              deleteItem={(index) => {\r\n                deleteFromArray(index, item);\r\n              }}\r\n            />\r\n          ))}\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <MapsInput\r\n            mainCoords={form.values.mapsCoord!}\r\n            isMainMoving\r\n            setCoord={(coord: any) => {\r\n              form.setFieldValue(\"mapsCoord\", coord);\r\n            }}\r\n          />\r\n          {form.values.id ? (\r\n            <Stack sx={{ m: 1 }} direction=\"row\" spacing={1}>\r\n              <Button variant=\"contained\" color=\"success\">\r\n                <SaveRounded /> {t(\"form.cv.download\")}\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                <FileUpload /> {t(\"form.cv.upload-new\")}\r\n              </Button>\r\n            </Stack>\r\n          ) : (\r\n            <Button sx={{ m: 1 }} variant=\"contained\" color=\"secondary\">\r\n              <FileUpload /> {t(\"form.cv.upload\")}\r\n            </Button>\r\n          )}\r\n          {Boolean(form.values.id) && (\r\n            <Stack sx={{ m: 1 }} direction=\"row\" spacing={1}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setSendMessageModalType(\"email\");\r\n                  setIsSendMessageModalOpen(true);\r\n                }}\r\n              >\r\n                <Email sx={{ mr: 1 }} /> {t(\"send-mail\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setSendMessageModalType(\"sms\");\r\n                  setIsSendMessageModalOpen(true);\r\n                }}\r\n              >\r\n                <Message sx={{ mr: 1 }} /> {t(\"send-sms\")}\r\n              </Button>\r\n            </Stack>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CandidateModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport candidates from \"../../mockData/candidates\";\r\nimport CandidateModal from \"./CandidateModal\";\r\nimport { ICandidate } from \"../../interfaces/Candidate\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\nimport { useFormik } from \"formik\";\r\nimport IFilter from \"../../interfaces/Filter\";\r\nimport calculateDistance from \"../../helpers/calculateDistance\";\r\nimport Loading from \"../../components/Loading\";\r\n\r\nconst CandidatesTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.table\" });\r\n  const [isCandidateModalOpen, setIsCandidateModalOpen] =\r\n    useState<boolean>(false);\r\n  const [candidateModalCandidate, setCandidateModalCandidate] = useState<\r\n    ICandidate | undefined\r\n  >(undefined);\r\n  const [candidatesData, setCandidatesData] = useState(candidates);\r\n\r\n  const searchForm = useFormik({\r\n    initialValues: {\r\n      search: {} as any,\r\n    },\r\n    onSubmit: (e: any) => {\r\n      const result = Object.keys(e.search).reduce(\r\n        (candidates: any, key: string) => {\r\n          const filterFunc = filters.filter((filter) => filter.name === key)[0]\r\n            ? filters.filter((filter) => filter.name === key)[0].filterFunc\r\n            : undefined;\r\n          if (filterFunc) {\r\n            return candidates.filter(filterFunc);\r\n          } else {\r\n            const re = new RegExp(\".*\" + e.search[key].toLowerCase() + \".*\");\r\n            return candidates.filter((e: any) =>\r\n              e[key] ? re.test(e[key].toLowerCase()) : false\r\n            );\r\n          }\r\n        },\r\n        candidates\r\n      );\r\n      setCandidatesData(result);\r\n    },\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  const filters: IFilter[] = [\r\n    {\r\n      name: \"distance\",\r\n      label: t(\"search-filters.distance\"),\r\n      notVisible: true,\r\n      filterFunc: (candidate: ICandidate) => {\r\n        const d = calculateDistance(\r\n          searchForm.values.search.distance.company.mapsCoord,\r\n          candidate.mapsCoord!\r\n        );\r\n        return d < searchForm.values.search.distance.value;\r\n      },\r\n    },\r\n    { name: \"diploma\", label: t(\"search-filters.diploma\") },\r\n    { name: \"keywords\", label: t(\"search-filters.keywords\") },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <React.Suspense fallback={<Loading />}>\r\n        <CandidateModal\r\n          candidate={candidateModalCandidate}\r\n          isOpen={isCandidateModalOpen}\r\n          setIsOpen={setIsCandidateModalOpen}\r\n        />\r\n      </React.Suspense>\r\n      <CRUDTable<ICandidate>\r\n        data={candidatesData}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"surname\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"surname\", \"city\"]}\r\n        setModalData={setCandidateModalCandidate}\r\n        setIsDataModalOpen={setIsCandidateModalOpen}\r\n        searchForm={searchForm}\r\n        filters={filters}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CandidatesTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CandidatesTable from \"./CandidatesTable\";\r\n\r\nconst Candidates = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"candidates\",\r\n      },\r\n    });\r\n  });\r\n  return <CandidatesTable />;\r\n};\r\n\r\nexport default Candidates;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, callBackFn } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      callBackFn(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          callBackFn(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [callBackFn]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import React, { useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport calculateDistance from \"../../helpers/calculateDistance\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression | { lat: number; lng: number };\r\n  secondCoord?: LatLngExpression | { lat: number; lng: number };\r\n  setCoord: (coord: any) => void;\r\n  isMainMoving?: boolean;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords, secondCoord, isMainMoving, setCoord } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"mapsInput\" });\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(\r\n    secondCoord || mainCoords\r\n  );\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n\r\n  return (\r\n    <Card sx={{ m: 1 }}>\r\n      {!isMainMoving && <CardHeader title={`${distance} ${t(\"title\")}`} />}\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={12}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {Boolean(mainCoords && !isMainMoving) && (\r\n            <Marker position={mainCoords} />\r\n          )}\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            callBackFn={(coords: any) => {\r\n              if (coords) {\r\n                const dist = calculateDistance(mainCoords as any, coords);\r\n                console.log(coords, mainCoords, dist);\r\n\r\n                setDistance(dist.toFixed(3));\r\n                setSelectionCoords(coords);\r\n                setCoord(coords);\r\n              }\r\n            }}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","export default function calculateDistance(\r\n  coord1: { lat: number; lng: number },\r\n  coord2: { lat: number; lng: number }\r\n) {\r\n  const R = 6371; // km\r\n  const dLat = toRad(coord2.lat - coord1.lat);\r\n  const dLon = toRad(coord2.lng - coord1.lng);\r\n  const lat1 = toRad(coord1.lat);\r\n  const lat2 = toRad(coord2.lat);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n}\r\n\r\n// Converts numeric degrees to radians\r\nfunction toRad(Value: number) {\r\n  return (Value * Math.PI) / 180;\r\n}\r\n","import { IJob } from \"../interfaces/Job\";\r\n\r\nconst jobs: IJob[] = [\r\n  { id: 1, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 2, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 3, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 4, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 5, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 6, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 7, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 8, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 9, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 10, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 11, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 12, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 13, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 14, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 15, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 16, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 17, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 18, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 19, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n];\r\n\r\nexport default jobs;\r\n"],"names":["emptyCandidate","id","name","surname","CVAddress","phoneNumbers","emailAdresses","address","extraAddress","zipCode","city","country","mapsCoord","undefined","creatorMember","previousJobs","skills","comment","salaryExpectation","departments","keywords","diplomas","placedJob","situation","props","label","data","addNew","deleteItem","useState","Array","length","fill","hovered","setHovered","addNewValue","setAddNewValue","Card","sx","border","width","m","CardHeader","title","CardContent","Grid","container","spacing","mx","map","item","index","xs","Button","variant","color","onMouseOut","cHovered","onMouseOver","onClick","Remove","CardActions","TextField","value","onChange","e","target","onKeyUpCapture","which","marginLeft","InputProps","endAdornment","InputAdornment","position","IconButton","Add","isOpen","setIsOpen","addSkill","editSkill","action","modalSkill","setModalSkill","t","useTranslation","keyPrefix","Modal","open","onClose","Box","top","left","transform","textAlign","bgcolor","padding","FormInput","type","prevSkill","level","Save","mr","removeSkill","isSkillModalOpen","setIsSkillModalOpen","modalAction","setModalAction","skill","display","Tooltip","placement","ml","Edit","Clear","sms","template","email","messageType","candidate","setTemplate","Paper","height","Stack","mb","Close","FormControl","fullWidth","InputLabel","Select","labelId","templateDatas","filter","MenuItem","temp","Boolean","mt","lineHeight","split","Typography","component","backgroundColor","borderRadius","resolve","endIcon","Send","FormControlLabel","control","Switch","checkedIcon","Check","icon","labelPlacement","multiTextInputSections","form","useFormik","initialValues","onSubmit","enableReinitialize","isSendMessageModalOpen","setIsSendMessageModalOpen","sendMessageModalType","setSendMessageModalType","ActionModal","values","saveFunction","md","handleChange","disabled","disableRipple","checked","setFieldValue","toString","FormDropdown","jobs","datas","defaultValue","selectedValue","dataToValue","getValue","prevSkills","push","key","arr","addToFormArray","splice","deleteFromArray","MapsInput","mainCoords","isMainMoving","setCoord","coord","direction","SaveRounded","FileUpload","Email","Message","isCandidateModalOpen","setIsCandidateModalOpen","candidateModalCandidate","setCandidateModalCandidate","candidates","candidatesData","setCandidatesData","searchForm","search","result","Object","keys","reduce","filterFunc","filters","re","RegExp","toLowerCase","test","notVisible","calculateDistance","distance","company","fallback","Loading","CRUDTable","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","callBackFn","useMapEvents","click","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","secondCoord","selectionCoords","setSelectionCoords","setDistance","MapContainer","center","zoom","style","scrollWheelZoom","TileLayer","attribution","url","coords","dist","console","log","toFixed","coord1","coord2","dLat","toRad","lat","dLon","lng","lat1","lat2","a","Math","sin","cos","atan2","sqrt","Value","PI","experience"],"sourceRoot":""}