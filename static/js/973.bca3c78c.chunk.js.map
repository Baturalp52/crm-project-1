{"version":3,"file":"static/js/973.bca3c78c.chunk.js","mappings":"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","sources":["Pages/Companies/emptyCompany.ts","Pages/Companies/CompanyModal/index.tsx","Pages/Companies/CompaniesTable.tsx","Pages/Companies/index.tsx","components/SuccessSnackbar/index.tsx","components/ActionModal/index.tsx","hooks/useSuccessSnackbar/index.tsx","components/CRUDTable/DeleteModal/index.tsx","components/SearchInput/index.tsx","components/CRUDTable/AdvancedSearchModal/SearchDistance.tsx","components/CRUDTable/AdvancedSearchModal/index.tsx","components/CRUDTable/SearchBar/index.tsx","components/CRUDTable/index.tsx","components/FormDropdown/index.tsx","components/FormInput/index.tsx","components/MapsInput/LocationMarker.tsx","components/MapsInput/index.tsx","helpers/calculateDistance.ts","helpers/resolve.ts","mockData/companies.ts"],"sourcesContent":["export const emptyCompany = {\r\n  id: 0,\r\n  name: \"\",\r\n  address: \"\",\r\n  city: \"\",\r\n  sector: \"\",\r\n  jobs: [],\r\n  mapsCoord: {\r\n    lat: 51.509865,\r\n    lng: -0.118092,\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Box, Grid, List, ListItem, Typography } from \"@mui/material\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport ActionModal from \"../../../components/ActionModal\";\r\n\r\nimport { ICompany } from \"../../../interfaces/Company\";\r\nimport { emptyCompany } from \"../emptyCompany\";\r\nimport MapsInput from \"../../../components/MapsInput\";\r\n\r\ninterface ICompanyModalProps {\r\n  company?: ICompany;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst CompanyModal = (props: ICompanyModalProps) => {\r\n  const { company, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.modal\" });\r\n\r\n  let form = useFormik({\r\n    initialValues: company ? { ...company } : { ...emptyCompany },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <Grid container padding={2} spacing={2}>\r\n        <Grid xs={12} md={6} item>\r\n          <List>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.id\")}\r\n                type=\"number\"\r\n                value={form.values.id}\r\n                name=\"id\"\r\n                onChange={form.handleChange}\r\n                disabled\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.name\")}\r\n                type=\"text\"\r\n                value={form.values.name}\r\n                name=\"name\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.address\")}\r\n                type=\"text\"\r\n                value={form.values.address}\r\n                name=\"address\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.city\")}\r\n                type=\"text\"\r\n                value={form.values.city}\r\n                name=\"city\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.sector\")}\r\n                type=\"text\"\r\n                value={form.values.sector}\r\n                name=\"sector\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Box m={1}>\r\n            <Typography variant=\"subtitle1\">{t(\"form.jobs\")}</Typography>\r\n            <List sx={{ padding: 1 }}>\r\n              {form.values.jobs && form.values.jobs.length > 0 ? (\r\n                form.values.jobs?.map((job, index) => (\r\n                  <ListItem key={index}>{job.name}</ListItem>\r\n                ))\r\n              ) : (\r\n                <ListItem>No Jobs</ListItem>\r\n              )}\r\n            </List>\r\n          </Box>\r\n          <MapsInput\r\n            mainCoords={form.values.mapsCoord}\r\n            setCoord={(coord: any) => {\r\n              form.setFieldValue(\"mapsCoord\", coord);\r\n            }}\r\n            isMainMoving\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CompanyModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport companies from \"../../mockData/companies\";\r\nimport CompanyModal from \"./CompanyModal\";\r\nimport { ICompany } from \"../../interfaces/Company\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CompanysTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.table\" });\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState<boolean>(false);\r\n  const [companyModalCompany, setCompanyModalCompany] = useState<\r\n    ICompany | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <CompanyModal\r\n        company={companyModalCompany}\r\n        isOpen={isCompanyModalOpen}\r\n        setIsOpen={setIsCompanyModalOpen}\r\n      />\r\n      <CRUDTable<ICompany>\r\n        data={companies}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"city\"]}\r\n        setModalData={setCompanyModalCompany}\r\n        setIsDataModalOpen={setIsCompanyModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CompanysTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CompaniesTable from \"./CompaniesTable\";\r\n\r\nconst Companies = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"companies\",\r\n      },\r\n    });\r\n  });\r\n  return <CompaniesTable />;\r\n};\r\n\r\nexport default Companies;\r\n","import { Alert, Snackbar } from \"@mui/material\";\r\n\r\ninterface ISuccessSnackbarProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  label: string;\r\n}\r\n\r\nconst SuccessSnackbar = (props: ISuccessSnackbarProps) => {\r\n  const { open, setOpen, label } = props;\r\n  return (\r\n    <Snackbar\r\n      open={open}\r\n      autoHideDuration={6000}\r\n      onClose={() => setOpen(false)}\r\n    >\r\n      <Alert\r\n        onClose={() => setOpen(false)}\r\n        severity=\"success\"\r\n        sx={{ width: \"100%\" }}\r\n      >\r\n        {label}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default SuccessSnackbar;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport useSuccessSnackbar from \"../../hooks/useSuccessSnackbar\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  const { setOpen: setSuccessbar, snackbar: SuccessSnack } = useSuccessSnackbar(\r\n    t(\"success-snack-label\")\r\n  );\r\n  return (\r\n    <>\r\n      {SuccessSnack}\r\n      <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n        <Card\r\n          sx={{\r\n            position: \"absolute\" as \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"95%\",\r\n            height: \"85%\",\r\n            bgcolor: \"background.paper\",\r\n            border: \"none\",\r\n          }}\r\n        >\r\n          <CardHeader\r\n            sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n            title={title}\r\n            action={\r\n              <IconButton\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                }}\r\n              >\r\n                <CloseRounded htmlColor=\"white\" />\r\n              </IconButton>\r\n            }\r\n          />\r\n          <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n            {children}\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n              startIcon={<SaveRounded />}\r\n              color=\"success\"\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                setSuccessbar(true);\r\n                saveFunction();\r\n              }}\r\n            >\r\n              {t(\"save\")}\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import { useState } from \"react\";\r\nimport SuccessSnackbar from \"../../components/SuccessSnackbar\";\r\n\r\nexport default function useSuccessSnackbar(label: string) {\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const snackbar = (\r\n    <SuccessSnackbar open={open} setOpen={setOpen} label={label} />\r\n  );\r\n  return {\r\n    setOpen,\r\n    snackbar,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  Paper,\r\n  IconButton,\r\n  Typography,\r\n  Stack,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { Close } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IDeleteModal {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}\r\n\r\nconst DeleteModal = (props: IDeleteModal) => {\r\n  const { open, setOpen } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.delete-modal\",\r\n  });\r\n  return (\r\n    <Modal open={open} onClose={() => setOpen(false)}>\r\n      <Paper\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          pt: 1,\r\n          px: 3,\r\n          pb: 3,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <IconButton sx={{ ml: \"auto\", mb: 2 }} onClick={() => setOpen(false)}>\r\n          <Close />\r\n        </IconButton>\r\n        <Typography>{t(\"are-you-sure\")}</Typography>\r\n        <Stack direction=\"row\" justifyContent=\"space-evenly\" mt={2}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            {t(\"cancel\")}\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </Stack>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DeleteModal;\r\n","import React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { Input, InputAdornment } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SearchInput = (props: { onChange: (e: any) => void }) => {\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"searchInput\" });\r\n  const { onChange } = props;\r\n  return (\r\n    <Input\r\n      type=\"search\"\r\n      onChange={onChange}\r\n      startAdornment={\r\n        <InputAdornment position=\"start\">\r\n          <Search />\r\n        </InputAdornment>\r\n      }\r\n      placeholder={t(\"placeholder\")}\r\n      sx={{ width: \"40em\", mx: \"auto\" }}\r\n    ></Input>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { Grid, Stack, TextField } from \"@mui/material\";\r\nimport { ICompany } from \"../../../interfaces/Company\";\r\nimport companies from \"../../../mockData/companies\";\r\nimport FormDropdown from \"../../FormDropdown\";\r\n\r\nconst SearchDistance = (props: any) => {\r\n  const { search, setSearch } = props;\r\n  return (\r\n    <Grid item xs={12} md={4}>\r\n      <Stack direction=\"row\">\r\n        <FormDropdown<ICompany>\r\n          label=\"Select Company\"\r\n          handleChange={(e) => {\r\n            const cSearch = { ...search };\r\n            cSearch.distance = {\r\n              company: {},\r\n              value: 0,\r\n            };\r\n            cSearch.distance.company = companies.filter(\r\n              (company) => company.id === e.target.value\r\n            )[0];\r\n\r\n            setSearch(cSearch);\r\n          }}\r\n          datas={companies}\r\n          defaultValue=\"Select Company\"\r\n          selectedValue={\r\n            search.distance\r\n              ? search.distance.company\r\n                ? search.distance.company.id\r\n                : 0\r\n              : 0\r\n          }\r\n          dataToValue={(item) => `${item.id} - ${item.name}`}\r\n          getValue={(item) => item.id}\r\n        />\r\n        <TextField\r\n          label=\"Distance\"\r\n          type=\"number\"\r\n          name={\"distance\"}\r\n          value={search.distance ? search.distance.value : 0}\r\n          disabled={!Boolean(search.distance ? search.distance.company : false)}\r\n          variant=\"standard\"\r\n          margin=\"dense\"\r\n          onChange={(e) => {\r\n            const cSearch = { ...search };\r\n            cSearch.distance.value = e.target.value;\r\n            setSearch(cSearch);\r\n          }}\r\n        />\r\n      </Stack>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchDistance;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IFilter from \"../../../interfaces/Filter\";\r\nimport SearchDistance from \"./SearchDistance\";\r\n\r\nconst AdvancedSearchModal = (props: {\r\n  isOpen: boolean;\r\n  setIsOpen: (t: boolean) => void;\r\n  filters: IFilter[];\r\n  searchForm: any;\r\n}) => {\r\n  const { isOpen, setIsOpen, filters, searchForm } = props;\r\n  const [search, setSearch] = useState(searchForm.values.search);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.advanced-search-modal\",\r\n  });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Paper\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          minWidth: \"70%\",\r\n          minHeight: \"60%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 3,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Stack mx=\"auto\">\r\n          <Typography variant=\"h5\" component=\"h6\">\r\n            {t(\"title\")}\r\n          </Typography>\r\n        </Stack>\r\n        <Grid container display=\"flex\" width=\"100%\" textAlign=\"center\">\r\n          <SearchDistance search={search} setSearch={setSearch} />\r\n          {filters.map((filter, index) => {\r\n            return (\r\n              !Boolean(filter.notVisible) && (\r\n                <Grid item xs={12} md={4} key={index}>\r\n                  <TextField\r\n                    label={filter.label}\r\n                    type=\"text\"\r\n                    name={filter.name}\r\n                    value={search[filter.name] || \"\"}\r\n                    variant=\"standard\"\r\n                    margin=\"dense\"\r\n                    onChange={(e) => {\r\n                      const cSearch = { ...search };\r\n                      cSearch[filter.name] = e.target.value;\r\n                      setSearch(cSearch);\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              )\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Stack mt=\"auto\" ml=\"auto\">\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              searchForm.setFieldValue(\"search\", search);\r\n              searchForm.submitForm();\r\n            }}\r\n            startIcon={<Search />}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Stack>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AdvancedSearchModal;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport SearchInput from \"../../SearchInput\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Search, Tune } from \"@mui/icons-material\";\r\nimport AdvancedSearchModal from \"../AdvancedSearchModal\";\r\n\r\ninterface ISearchBarProps {\r\n  searchForm: any;\r\n  filters?: { label: string; name: string }[];\r\n}\r\n\r\nconst SearchBar = (props: ISearchBarProps) => {\r\n  const { searchForm, filters } = props;\r\n  const [searchKey, setSearchKey] = useState<string>(\"\");\r\n  const [isAdvancedSearchModalOpen, setIsAdvancedSearchModalOpen] =\r\n    useState<boolean>(false);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.search-bar\",\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {Boolean(filters) && (\r\n        <AdvancedSearchModal\r\n          isOpen={isAdvancedSearchModalOpen}\r\n          setIsOpen={setIsAdvancedSearchModalOpen}\r\n          searchForm={searchForm}\r\n          filters={filters ? filters : []}\r\n        />\r\n      )}\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{ mr: \"auto\", width: \"50%\", ml: 2, alignItems: \"flex-end\" }}\r\n      >\r\n        <Grid item xs={5} sx={{ display: \"flex\" }}>\r\n          <SearchInput\r\n            onChange={(e: any) => {\r\n              setSearchKey(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            sx={{ ml: \"auto\" }}\r\n            startIcon={<Search />}\r\n            onClick={() => {\r\n              searchForm.setFieldValue(\"search\", { name: searchKey });\r\n              searchForm.submitForm();\r\n            }}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Grid>\r\n        {Boolean(filters) && (\r\n          <Grid item xs={4}>\r\n            <Button\r\n              sx={{ ml: \"auto\" }}\r\n              startIcon={<Tune />}\r\n              onClick={() => {\r\n                setIsAdvancedSearchModalOpen(true);\r\n              }}\r\n            >\r\n              {t(\"advanced-search\")}\r\n            </Button>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport resolve from \"../../helpers/resolve\";\r\nimport DeleteModal from \"./DeleteModal\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n  searchForm?: any;\r\n  filters?: any;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n    searchForm,\r\n    filters,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  const [openDeleteModal, setOpenDeleteModal] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <DeleteModal open={openDeleteModal} setOpen={setOpenDeleteModal} />\r\n      {Boolean(searchForm) && (\r\n        <SearchBar searchForm={searchForm} filters={filters} />\r\n      )}\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name, index) => (\r\n                <TableCell key={index}>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.length > 0 ? (\r\n              data\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell key={index}>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedDatasId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.push(item.id);\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          } else {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.splice(\r\n                              _selectedDatasId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    {keysToShow.map((key, index) => (\r\n                      <TableCell key={index}>\r\n                        {Object.keys(customComponent).includes(key)\r\n                          ? customComponent[key](item[key as keyof typeof item])\r\n                          : key.includes(\".\")\r\n                          ? resolve(key, item)\r\n                          : item[key as keyof typeof item]}\r\n                      </TableCell>\r\n                    ))}\r\n\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setModalData(item);\r\n                          setIsDataModalOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={cellNames.length + 1} align=\"center\">\r\n                  {t(\"no-data\")}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n      <Stack padding={1}>\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n            onClick={() => {\r\n              setOpenDeleteModal(true);\r\n            }}\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","import {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SxProps,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\ninterface IFormDropdownProps<DataType> {\r\n  label: string;\r\n  handleChange: (e: any) => void;\r\n  datas: DataType[];\r\n  defaultValue: string;\r\n  dataToValue: (data: DataType) => string;\r\n  selectedValue?: number | string;\r\n  disabled?: boolean;\r\n  width?: string;\r\n  sx?: SxProps;\r\n  getValue: (data: DataType) => string | number;\r\n}\r\n\r\nconst FormDropdown = <DataType extends { id: number } | string>(\r\n  props: IFormDropdownProps<DataType>\r\n) => {\r\n  const {\r\n    label,\r\n    handleChange,\r\n    defaultValue,\r\n    datas,\r\n    dataToValue,\r\n    selectedValue,\r\n    disabled,\r\n    width,\r\n    getValue,\r\n    sx,\r\n  } = props;\r\n  return (\r\n    <FormControl\r\n      variant=\"standard\"\r\n      disabled={disabled}\r\n      sx={{ width: \"100%\" || width, m: 1, ...sx }}\r\n    >\r\n      <InputLabel>{label}</InputLabel>\r\n\r\n      <Select value={selectedValue || 0} label={label} onChange={handleChange}>\r\n        <MenuItem value={0}>\r\n          <em>{defaultValue}</em>\r\n        </MenuItem>\r\n        {datas.map((data: DataType, index) => (\r\n          <MenuItem key={index} value={getValue(data)}>\r\n            {dataToValue(data)}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormDropdown;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, callBackFn } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      callBackFn(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          callBackFn(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [callBackFn]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import React, { useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport calculateDistance from \"../../helpers/calculateDistance\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression | { lat: number; lng: number };\r\n  secondCoord?: LatLngExpression | { lat: number; lng: number };\r\n  setCoord: (coord: any) => void;\r\n  isMainMoving?: boolean;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords, secondCoord, isMainMoving, setCoord } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"mapsInput\" });\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(\r\n    secondCoord || mainCoords\r\n  );\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n\r\n  return (\r\n    <Card sx={{ m: 1 }}>\r\n      {!isMainMoving && <CardHeader title={`${distance} ${t(\"title\")}`} />}\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={12}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {Boolean(mainCoords && !isMainMoving) && (\r\n            <Marker position={mainCoords} />\r\n          )}\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            callBackFn={(coords: any) => {\r\n              if (coords) {\r\n                const dist = calculateDistance(mainCoords as any, coords);\r\n                console.log(coords, mainCoords, dist);\r\n\r\n                setDistance(dist.toFixed(3));\r\n                setSelectionCoords(coords);\r\n                setCoord(coords);\r\n              }\r\n            }}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","export default function calculateDistance(\r\n  coord1: { lat: number; lng: number },\r\n  coord2: { lat: number; lng: number }\r\n) {\r\n  const R = 6371; // km\r\n  const dLat = toRad(coord2.lat - coord1.lat);\r\n  const dLon = toRad(coord2.lng - coord1.lng);\r\n  const lat1 = toRad(coord1.lat);\r\n  const lat2 = toRad(coord2.lat);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n}\r\n\r\n// Converts numeric degrees to radians\r\nfunction toRad(Value: number) {\r\n  return (Value * Math.PI) / 180;\r\n}\r\n","export default function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import { ICompany } from \"../interfaces/Company\";\r\n\r\nconst companies: ICompany[] = [\r\n  {\r\n    id: 1,\r\n    name: \"Company Ankara\",\r\n    city: \"Ankara\",\r\n    mapsCoord: {\r\n      lat: 39.925533,\r\n      lng: 32.866287,\r\n    },\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Company Paris\",\r\n    city: \"Paris\",\r\n    mapsCoord: {\r\n      lat: 48.864716,\r\n      lng: 2.349014,\r\n    },\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Company London\",\r\n    city: \"London\",\r\n    mapsCoord: {\r\n      lat: 51.509865,\r\n      lng: -0.118092,\r\n    },\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Company New York\",\r\n    city: \"New York\",\r\n    mapsCoord: {\r\n      lat: 40.73061,\r\n      lng: -73.935242,\r\n    },\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Company Berlin\",\r\n    city: \"Berlin\",\r\n    mapsCoord: {\r\n      lat: 52.520008,\r\n      lng: 13.404954,\r\n    },\r\n  },\r\n];\r\n\r\nexport default companies;\r\n"],"names":["emptyCompany","id","name","address","city","sector","jobs","mapsCoord","lat","lng","props","company","isOpen","setIsOpen","t","useTranslation","keyPrefix","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","title","values","saveFunction","Grid","container","padding","spacing","xs","md","item","List","ListItem","FormInput","label","type","value","onChange","handleChange","disabled","Box","m","Typography","variant","sx","length","map","job","index","MapsInput","mainCoords","setCoord","coord","setFieldValue","isMainMoving","useState","isCompanyModalOpen","setIsCompanyModalOpen","undefined","companyModalCompany","setCompanyModalCompany","CRUDTable","data","companies","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","CompaniesTable","open","setOpen","Snackbar","autoHideDuration","onClose","Alert","severity","width","children","snackbar","useSuccessSnackbar","setSuccessbar","SuccessSnack","Modal","Card","position","top","left","transform","height","bgcolor","border","CardHeader","p","color","action","IconButton","onClick","CloseRounded","htmlColor","CardContent","overflow","CardActions","Button","marginLeft","startIcon","SaveRounded","Paper","pt","px","pb","display","flexDirection","ml","mb","Close","Stack","direction","justifyContent","mt","Input","startAdornment","InputAdornment","Search","placeholder","mx","search","setSearch","FormDropdown","e","cSearch","distance","target","datas","defaultValue","selectedValue","dataToValue","getValue","TextField","Boolean","margin","filters","searchForm","minWidth","minHeight","component","textAlign","filter","notVisible","submitForm","searchKey","setSearchKey","isAdvancedSearchModalOpen","setIsAdvancedSearchModalOpen","mr","alignItems","Tune","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","openDeleteModal","setOpenDeleteModal","boxShadow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","c","TableBody","slice","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","resolve","BorderColor","colSpan","align","TablePagination","rowsPerPageOptions","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","ButtonGroup","Add","DeleteForeverRounded","error","htmlFor","callBackFn","useMapEvents","click","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","secondCoord","selectionCoords","setSelectionCoords","setDistance","MapContainer","center","zoom","style","scrollWheelZoom","TileLayer","attribution","url","coords","dist","calculateDistance","console","log","toFixed","coord1","coord2","dLat","toRad","dLon","lat1","lat2","a","Math","sin","cos","atan2","sqrt","Value","PI","path","obj","split","reduce","prev","curr"],"sourceRoot":""}