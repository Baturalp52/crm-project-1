{"version":3,"file":"static/js/363.caa1b32c.chunk.js","mappings":"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","sources":["Pages/Candidates/emptyCandidate.ts","components/FormMultiTextInput/index.tsx","components/MapsInput/LocationMarker.tsx","axios/index.ts","components/MapsInput/helpers.ts","components/MapsInput/index.tsx","mockData/coords.ts","Pages/Candidates/CandidateModal/SkillModal.tsx","Pages/Candidates/CandidateModal/Skills.tsx","Pages/Candidates/CandidateModal/index.tsx","Pages/Candidates/CandidatesTable.tsx","Pages/Candidates/index.tsx","components/ActionModal/index.tsx","components/SearchInput/index.tsx","components/CRUDTable/SearchBar/index.tsx","components/CRUDTable/index.tsx","components/CRUDTable/helpers.ts","components/FormDropdown/index.tsx","components/FormInput/index.tsx","mockData/candidates.ts","mockData/jobs.ts"],"sourcesContent":["export const emptyCandidate = {\r\n  id: 0,\r\n  name: \"\",\r\n  surname: \"\",\r\n  CVAddress: \"\",\r\n  phoneNumbers: [],\r\n  emailAdresses: [],\r\n  address: \"\",\r\n  extraAddress: \"\",\r\n  zipCode: \"\",\r\n  city: \"\",\r\n  country: \"\",\r\n  mapsCoord: \"\",\r\n  creatorMember: {},\r\n  previousJobs: [],\r\n  requestedJob: { id: 0, name: \"\" },\r\n  skills: [],\r\n  comment: \"\",\r\n  salaryExpectation: 0,\r\n  departments: [],\r\n  keywords: [],\r\n  situation: \"free\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n  InputAdornment,\r\n  Grid,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Add, Remove } from \"@mui/icons-material\";\r\n\r\ninterface IFormMultiTextInputProps {\r\n  label: string;\r\n  id: string;\r\n  data: string[];\r\n}\r\n\r\nconst FormMultiTextInput = (props: IFormMultiTextInputProps) => {\r\n  const { label, id, data } = props;\r\n  const [hovered, setHovered] = useState(Array(data.length).fill(0));\r\n  return (\r\n    <Card sx={{ border: \"none\", width: \"100%\", m: 1 }}>\r\n      <CardHeader title={label} />\r\n      <CardContent>\r\n        <Grid container spacing={2} mx=\"auto\">\r\n          {data.map((item, index) => {\r\n            return (\r\n              <Grid key={index} item xs={12}>\r\n                <Button\r\n                  key={index}\r\n                  variant=\"outlined\"\r\n                  color={hovered[index] ? \"error\" : \"inherit\"}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    let cHovered = [...hovered];\r\n                    cHovered[index] = 0;\r\n                    setHovered(cHovered);\r\n                  }}\r\n                  onMouseOver={() => {\r\n                    let cHovered = [...hovered];\r\n                    cHovered[index] = 1;\r\n                    setHovered(cHovered);\r\n                  }}\r\n                >\r\n                  {hovered[index] ? (\r\n                    <>\r\n                      <Remove /> Delete\r\n                    </>\r\n                  ) : (\r\n                    item\r\n                  )}\r\n                </Button>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions>\r\n        <TextField\r\n          label=\"\"\r\n          id={id}\r\n          sx={{ marginLeft: \"auto\", width: \"100%\" }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton>\r\n                  <Add />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"standard\"\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FormMultiTextInput;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, setPosition } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      setPosition(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          setPosition(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [setPosition]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import axios from \"axios\";\r\n\r\nexport const defaultAxiosInstance = axios.create({\r\n  timeout: 1000,\r\n});\r\n","import { defaultAxiosInstance } from \"../../axios\";\r\n\r\nexport type coord = { lat: number; lng: number };\r\n\r\nexport const getDistanceBetween2Coords = async (\r\n  coord1: coord,\r\n  coord2: coord\r\n) => {\r\n  const requestUrl = `https://routing.openstreetmap.de/routed-foot/route/v1/driving/${coord1.lng.toFixed(\r\n    5\r\n  )},${coord1.lat.toFixed(5)};${coord2.lng.toFixed(5)},${coord2.lat.toFixed(\r\n    5\r\n  )}?overview=false&geometries=polyline&steps=false`;\r\n\r\n  var distance = 0;\r\n\r\n  await defaultAxiosInstance.get(requestUrl).then((e) => {\r\n    distance = e.data.routes[0].distance;\r\n  });\r\n\r\n  return distance;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { coord, getDistanceBetween2Coords } from \"./helpers\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"mapsInput\" });\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(null);\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n  useEffect(() => {\r\n    if (selectionCoords)\r\n      getDistanceBetween2Coords(mainCoords as coord, selectionCoords).then(\r\n        (e) => {\r\n          setDistance((e / 1000).toFixed(3));\r\n        }\r\n      );\r\n  }, [selectionCoords, mainCoords, setDistance]);\r\n\r\n  return (\r\n    <Card sx={{ m: 1 }}>\r\n      <CardHeader title={`${distance} ${t(\"title\")}`} />\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={16}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={mainCoords} />\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            setPosition={setSelectionCoords}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","const mainCoord = { lat: 39.92069001103445, lng: 32.854006924076806 };\r\nexport default mainCoord;\r\n","import React from \"react\";\r\nimport { Box, Button, Modal } from \"@mui/material\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport { Save } from \"@mui/icons-material\";\r\n\r\ninterface ISkillModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: (state: boolean) => void;\r\n  addSkill: (skill: ISkill) => void;\r\n  editSkill: (skill: ISkill) => void;\r\n  action: \"add\" | \"edit\";\r\n  modalSkill: ISkill;\r\n  setModalSkill: (skill: ISkill) => void;\r\n}\r\n\r\nconst SkillModal = (props: ISkillModalProps) => {\r\n  const {\r\n    isOpen,\r\n    setIsOpen,\r\n    addSkill,\r\n    editSkill,\r\n    action,\r\n    modalSkill,\r\n    setModalSkill,\r\n  } = props;\r\n  const { t } = useTranslation(\"pages\", {\r\n    keyPrefix: \"candidates.modal.form.skills\",\r\n  });\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={() => {\r\n        setIsOpen(false);\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          textAlign: \"center\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 2,\r\n        }}\r\n      >\r\n        <FormInput\r\n          label={t(\"name\")}\r\n          type=\"text\"\r\n          value={modalSkill.name}\r\n          name=\"skill-name\"\r\n          onChange={(e) => {\r\n            const prevSkill = { ...modalSkill };\r\n            prevSkill.name = e.target.value;\r\n            setModalSkill(prevSkill);\r\n          }}\r\n        />\r\n        <FormInput\r\n          label={t(\"skill-level\")}\r\n          type=\"text\"\r\n          value={modalSkill.level}\r\n          name=\"skill-level\"\r\n          onChange={(e) => {\r\n            const prevSkill = { ...modalSkill };\r\n            prevSkill.level = e.target.value;\r\n            setModalSkill(prevSkill);\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"success\"\r\n          onClick={() => {\r\n            action === \"add\" ? addSkill(modalSkill) : editSkill(modalSkill);\r\n            setIsOpen(false);\r\n          }}\r\n        >\r\n          <Save sx={{ mr: 1 }} />\r\n          {t(\"save-skill\")}\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SkillModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\nimport { Clear, Edit } from \"@mui/icons-material\";\r\nimport SkillModal from \"./SkillModal\";\r\n\r\ninterface ISkillsProps {\r\n  skills: ISkill[];\r\n  addSkill: (skill: ISkill) => void;\r\n  removeSkill: (skill: ISkill) => void;\r\n  editSkill: (skill: ISkill) => void;\r\n}\r\n\r\nconst Skills = (props: ISkillsProps) => {\r\n  const { t } = useTranslation(\"pages\", {\r\n    keyPrefix: \"candidates.modal.form.skills\",\r\n  });\r\n  const { skills, removeSkill, editSkill, addSkill } = props;\r\n  const [isSkillModalOpen, setIsSkillModalOpen] = useState<boolean>(false);\r\n  const [modalAction, setModalAction] = useState<\"add\" | \"edit\">(\"add\");\r\n  const [modalSkill, setModalSkill] = useState<ISkill>({\r\n    id: 0,\r\n    name: \"\",\r\n    level: \"\",\r\n  });\r\n  return (\r\n    <>\r\n      <SkillModal\r\n        isOpen={isSkillModalOpen}\r\n        setIsOpen={setIsSkillModalOpen}\r\n        addSkill={addSkill}\r\n        editSkill={editSkill}\r\n        action={modalAction}\r\n        modalSkill={modalSkill}\r\n        setModalSkill={setModalSkill}\r\n      />\r\n      <Card sx={{ border: \"none\", width: \"100%\", m: 1 }}>\r\n        <CardHeader title={t(\"title\")} />\r\n        <CardContent>\r\n          <Grid container>\r\n            {skills.map((skill, index) => (\r\n              <Grid key={index} item xs={12} sx={{ display: \"flex\" }}>\r\n                <Tooltip title={t(\"level\") + skill.level} placement=\"top\">\r\n                  <span>{skill.name}</span>\r\n                </Tooltip>\r\n                <IconButton\r\n                  sx={{ ml: \"auto\" }}\r\n                  onClick={() => {\r\n                    setModalAction(\"edit\");\r\n                    setModalSkill(skill);\r\n                    setIsSkillModalOpen(true);\r\n                  }}\r\n                >\r\n                  <Edit />\r\n                </IconButton>\r\n                <IconButton\r\n                  sx={{ ml: 1 }}\r\n                  onClick={() => {\r\n                    removeSkill(skill);\r\n                  }}\r\n                >\r\n                  <Clear />\r\n                </IconButton>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            onClick={() => {\r\n              setModalAction(\"add\");\r\n              setModalSkill({\r\n                id: 0,\r\n                name: \"\",\r\n                level: \"\",\r\n              });\r\n              setIsSkillModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add-new-skill\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from \"react\";\r\nimport { Grid, Button, Stack } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { ICandidate } from \"../../../interfaces/Candidate\";\r\nimport { emptyCandidate } from \"../emptyCandidate\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport { Email, FileUpload, Message, SaveRounded } from \"@mui/icons-material\";\r\nimport FormMultiTextInput from \"../../../components/FormMultiTextInput\";\r\nimport MapsInput from \"../../../components/MapsInput\";\r\nimport mainCoord from \"../../../mockData/coords\";\r\nimport ActionModal from \"../../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport FormDropdown from \"../../../components/FormDropdown\";\r\nimport { IJob } from \"../../../interfaces/Job\";\r\nimport jobs from \"../../../mockData/jobs\";\r\nimport Skills from \"./Skills\";\r\nimport { ISkill } from \"../../../interfaces/Skill\";\r\n\r\ninterface ICandidateModalProps {\r\n  candidate?: ICandidate;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst mockPhones = [\"05000000050\", \"05000000051\"];\r\n\r\nconst mockEmails = [\"example@example.com\", \"example@example.com\"];\r\n\r\nconst mockPreviousJobs = [\"Job 1\", \"Job 2\"];\r\n\r\nconst mockDepartments = [\"Department 1\", \"Department 2\"];\r\n\r\nconst mockKeywords = [\"Keyword 1\", \"Keyword 2\"];\r\n\r\nconst mockDiplomas = [\"Diploma 1\", \"Diploma 2\"];\r\n\r\nconst CandidateModal = (props: ICandidateModalProps) => {\r\n  const { candidate, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.modal\" });\r\n  let form = useFormik({\r\n    initialValues: candidate ? { ...candidate } : { ...emptyCandidate },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <Grid container spacing={2} padding={2}>\r\n        <Grid item xs={12} md={4}>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.surname\")}\r\n            type=\"text\"\r\n            value={form.values.surname}\r\n            name=\"surname\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.address\")}\r\n            type=\"text\"\r\n            value={form.values.address}\r\n            name=\"address\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.extraAddress\")}\r\n            type=\"text\"\r\n            value={form.values.extraAddress}\r\n            name=\"extraAddress\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.zipCode\")}\r\n            type=\"text\"\r\n            value={form.values.zipCode}\r\n            name=\"zipCode\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.city\")}\r\n            type=\"text\"\r\n            value={form.values.city}\r\n            name=\"city\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.country\")}\r\n            type=\"text\"\r\n            value={form.values.country}\r\n            name=\"country\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.comment\")}\r\n            type=\"text\"\r\n            value={form.values.comment}\r\n            name=\"comment\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormInput\r\n            label={t(\"form.salaryExpectation\")}\r\n            type=\"number\"\r\n            value={form.values.salaryExpectation}\r\n            name=\"salaryExpectation\"\r\n            onChange={form.handleChange}\r\n          />\r\n          <FormDropdown<IJob>\r\n            label={t(\"form.requested-job\")}\r\n            getValue={(item) => item.id}\r\n            handleChange={(e) => {\r\n              form.setFieldValue(\r\n                \"requestedJob\",\r\n                jobs.filter((job) => job.id === e.target.value)[0]\r\n              );\r\n            }}\r\n            datas={jobs}\r\n            defaultValue={t(\"form.requested-job\")}\r\n            dataToValue={(job) => `${job.id} - ${job.name}`}\r\n            selectedValue={\r\n              form.values.requestedJob ? form.values.requestedJob.id : 0\r\n            }\r\n          />\r\n          <Skills\r\n            skills={form.values.skills || []}\r\n            addSkill={(skill: ISkill) => {\r\n              const prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills.push(skill);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n            editSkill={(skill: ISkill) => {\r\n              let prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills = prevSkills.filter((item) => item.id !== skill.id);\r\n              prevSkills.push(skill);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n            removeSkill={(skill: ISkill) => {\r\n              let prevSkills = form.values.skills\r\n                ? [...form.values.skills]\r\n                : [];\r\n              prevSkills = prevSkills.filter((item) => item.id !== skill.id);\r\n              form.setFieldValue(\"skills\", prevSkills);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <FormMultiTextInput\r\n            label={t(\"form.phoneNumbers\")}\r\n            id=\"phone-numbers\"\r\n            data={mockPhones}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.emailAddresses\")}\r\n            id=\"email-addresses\"\r\n            data={mockEmails}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.previousJobs\")}\r\n            id=\"previous-jobs\"\r\n            data={mockPreviousJobs}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.departments\")}\r\n            id=\"departments\"\r\n            data={mockDepartments}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.keywords\")}\r\n            id=\"keywords\"\r\n            data={mockKeywords}\r\n          />\r\n          <FormMultiTextInput\r\n            label={t(\"form.diplomas\")}\r\n            id=\"diplomas\"\r\n            data={mockDiplomas}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <MapsInput mainCoords={mainCoord} />\r\n          {form.values.id ? (\r\n            <Stack sx={{ m: 1 }} direction=\"row\" spacing={1}>\r\n              <Button variant=\"contained\" color=\"success\">\r\n                <SaveRounded /> {t(\"form.cv.download\")}\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"secondary\">\r\n                <FileUpload /> {t(\"form.cv.upload-new\")}\r\n              </Button>\r\n            </Stack>\r\n          ) : (\r\n            <Button sx={{ m: 1 }} variant=\"contained\" color=\"secondary\">\r\n              <FileUpload /> {t(\"form.cv.upload\")}\r\n            </Button>\r\n          )}\r\n          {Boolean(form.values.id) && (\r\n            <Stack sx={{ m: 1 }} direction=\"row\" spacing={1}>\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                <Email sx={{ mr: 1 }} /> {t(\"send-mail\")}\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                <Message sx={{ mr: 1 }} /> {t(\"send-sms\")}\r\n              </Button>\r\n            </Stack>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CandidateModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport candidates from \"../../mockData/candidates\";\r\nimport CandidateModal from \"./CandidateModal\";\r\nimport { ICandidate } from \"../../interfaces/Candidate\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CandidatesTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"candidates.table\" });\r\n  const [isCandidateModalOpen, setIsCandidateModalOpen] =\r\n    useState<boolean>(false);\r\n  const [candidateModalCandidate, setCandidateModalCandidate] = useState<\r\n    ICandidate | undefined\r\n  >(undefined);\r\n  const [candidatesData, setCandidatesData] = useState(candidates);\r\n\r\n  return (\r\n    <>\r\n      <CandidateModal\r\n        candidate={candidateModalCandidate}\r\n        isOpen={isCandidateModalOpen}\r\n        setIsOpen={setIsCandidateModalOpen}\r\n      />\r\n      <CRUDTable<ICandidate>\r\n        data={candidatesData}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"surname\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"surname\", \"city\"]}\r\n        setModalData={setCandidateModalCandidate}\r\n        setIsDataModalOpen={setIsCandidateModalOpen}\r\n        filters={[\"distance\", \"job\", \"diploma\", \"keywords\"]}\r\n        search={(e) => {\r\n          setCandidatesData(e.target.value.length > 0 ? [] : candidates);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CandidatesTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CandidatesTable from \"./CandidatesTable\";\r\n\r\nconst Candidates = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"candidates\",\r\n      },\r\n    });\r\n  });\r\n  return <CandidatesTable />;\r\n};\r\n\r\nexport default Candidates;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { Input, InputAdornment } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SearchInput = (props: { onChange: (e: any) => void }) => {\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"searchInput\" });\r\n  const { onChange } = props;\r\n  return (\r\n    <Input\r\n      type=\"search\"\r\n      onChange={onChange}\r\n      startAdornment={\r\n        <InputAdornment position=\"start\">\r\n          <Search />\r\n        </InputAdornment>\r\n      }\r\n      placeholder={t(\"placeholder\")}\r\n      sx={{ width: \"40em\", mx: \"auto\" }}\r\n    ></Input>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport SearchInput from \"../../SearchInput\";\r\nimport FormDropdown from \"../../FormDropdown\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ISearchBarProps {\r\n  filter: string | number;\r\n  setFilter: (filter: string) => void;\r\n  filters: string[];\r\n  search: (e: any) => void;\r\n}\r\n\r\nconst SearchBar = (props: ISearchBarProps) => {\r\n  const { filter, setFilter, filters, search } = props;\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.search-bar\",\r\n  });\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ mr: \"auto\", width: \"45%\", ml: 2 }}>\r\n      <Grid item xs={6} sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <SearchInput\r\n          onChange={(e: any) => {\r\n            if (Boolean(filter)) search(e);\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6} sx={{ display: \"flex\" }}>\r\n        <FormDropdown<string>\r\n          label={t(\"label\")}\r\n          handleChange={(e) => {\r\n            setFilter(e.target.value);\r\n          }}\r\n          datas={filters}\r\n          defaultValue={t(\"select-filter\")}\r\n          dataToValue={(item) => t(`filters.${item}`)}\r\n          selectedValue={filter}\r\n          width=\"45%\"\r\n          getValue={(data) => data}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { resolve } from \"./helpers\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n  filters?: string[];\r\n  search?: (e: any) => void;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n    filters,\r\n    search,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  const [filter, setFilter] = useState<number | string>(0);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <Stack\r\n        padding={1}\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        {filters && search && (\r\n          <SearchBar\r\n            filter={filter}\r\n            setFilter={setFilter}\r\n            filters={filters}\r\n            search={search}\r\n          />\r\n        )}\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name, index) => (\r\n                <TableCell key={index}>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.length > 0 ? (\r\n              data\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell key={index}>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedDatasId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.push(item.id);\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          } else {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.splice(\r\n                              _selectedDatasId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    {keysToShow.map((key, index) => (\r\n                      <>\r\n                        <TableCell key={index}>\r\n                          {Object.keys(customComponent).includes(key)\r\n                            ? customComponent[key](\r\n                                item[key as keyof typeof item]\r\n                              )\r\n                            : key.includes(\".\")\r\n                            ? resolve(key, item)\r\n                            : item[key as keyof typeof item]}\r\n                        </TableCell>\r\n                      </>\r\n                    ))}\r\n\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setModalData(item);\r\n                          setIsDataModalOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={cellNames.length + 1} align=\"center\">\r\n                  {t(\"no-data\")}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","export function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\ninterface IFormDropdownProps<DataType> {\r\n  label: string;\r\n  handleChange: (e: any) => void;\r\n  datas: DataType[];\r\n  defaultValue: string;\r\n  dataToValue: (data: DataType) => string;\r\n  selectedValue: number | string;\r\n  disabled?: boolean;\r\n  width?: string;\r\n  getValue: (data: DataType) => string | number;\r\n}\r\n\r\nconst FormDropdown = <DataType extends { id: number } | string>(\r\n  props: IFormDropdownProps<DataType>\r\n) => {\r\n  const {\r\n    label,\r\n    handleChange,\r\n    defaultValue,\r\n    datas,\r\n    dataToValue,\r\n    selectedValue,\r\n    disabled,\r\n    width,\r\n    getValue,\r\n  } = props;\r\n  return (\r\n    <FormControl disabled={disabled} sx={{ width: \"100%\" || width, m: 1 }}>\r\n      <InputLabel>{label}</InputLabel>\r\n\r\n      <Select value={selectedValue} label={label} onChange={handleChange}>\r\n        <MenuItem value={0}>\r\n          <em>{defaultValue}</em>\r\n        </MenuItem>\r\n        {datas.map((data: DataType, index) => (\r\n          <MenuItem key={index} value={getValue(data)}>\r\n            {dataToValue(data)}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormDropdown;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { ICandidate } from \"../interfaces/Candidate\";\r\n\r\nconst candidates: ICandidate[] = [\r\n  { id: 1, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 2, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 3, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 4, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 5, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 6, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 7, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 8, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 9, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 10, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 11, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 12, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 13, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 14, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 15, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 16, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 17, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 18, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n  { id: 19, name: \"Example\", surname: \"Candidate\", city: \"Ankara\" },\r\n];\r\n\r\nexport default candidates;\r\n","import { IJob } from \"../interfaces/Job\";\r\n\r\nconst jobs: IJob[] = [\r\n  { id: 1, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 2, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 3, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 4, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 5, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 6, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 7, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 8, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 9, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 10, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 11, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 12, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 13, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 14, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 15, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 16, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 17, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 18, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 19, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n];\r\n\r\nexport default jobs;\r\n"],"names":["emptyCandidate","id","name","surname","CVAddress","phoneNumbers","emailAdresses","address","extraAddress","zipCode","city","country","mapsCoord","creatorMember","previousJobs","requestedJob","skills","comment","salaryExpectation","departments","keywords","situation","props","label","data","useState","Array","length","fill","hovered","setHovered","Card","sx","border","width","m","CardHeader","title","CardContent","Grid","container","spacing","mx","map","item","index","xs","Button","variant","color","onMouseOut","cHovered","onMouseOver","Remove","CardActions","TextField","marginLeft","InputProps","endAdornment","InputAdornment","position","IconButton","Add","setPosition","useMapEvents","click","e","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","defaultAxiosInstance","axios","timeout","getDistanceBetween2Coords","coord1","coord2","requestUrl","lng","toFixed","lat","distance","get","then","routes","mainCoords","t","useTranslation","keyPrefix","selectionCoords","setSelectionCoords","setDistance","useEffect","MapContainer","center","zoom","style","height","scrollWheelZoom","TileLayer","attribution","url","isOpen","setIsOpen","addSkill","editSkill","action","modalSkill","setModalSkill","Modal","open","onClose","Box","top","left","transform","textAlign","bgcolor","padding","FormInput","type","value","onChange","prevSkill","target","level","onClick","Save","mr","removeSkill","isSkillModalOpen","setIsSkillModalOpen","modalAction","setModalAction","skill","display","Tooltip","placement","ml","Edit","Clear","mockPhones","mockEmails","mockPreviousJobs","mockDepartments","mockKeywords","mockDiplomas","candidate","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","values","saveFunction","md","handleChange","disabled","FormDropdown","getValue","setFieldValue","jobs","job","datas","defaultValue","dataToValue","selectedValue","prevSkills","push","filter","mainCoord","Stack","direction","SaveRounded","FileUpload","Boolean","Email","Message","isCandidateModalOpen","setIsCandidateModalOpen","undefined","candidateModalCandidate","setCandidateModalCandidate","candidates","candidatesData","setCandidatesData","CRUDTable","cellNames","keysToShow","setModalData","setIsDataModalOpen","filters","search","pageRedux","payload","children","p","htmlColor","overflow","startIcon","Input","startAdornment","Search","placeholder","setFilter","alignItems","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","Paper","boxShadow","justifyContent","ButtonGroup","DeleteForeverRounded","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","c","TableBody","slice","includes","_selectedDatasId","splice","indexOf","key","Object","keys","path","obj","split","reduce","prev","curr","BorderColor","colSpan","align","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","error","htmlFor","experience"],"sourceRoot":""}