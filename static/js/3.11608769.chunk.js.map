{"version":3,"file":"static/js/3.11608769.chunk.js","mappings":"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","sources":["Pages/Jobs/emptyJob.ts","Pages/Jobs/JobModal.tsx","Pages/Jobs/JobsTable.tsx","Pages/Jobs/index.tsx","components/ActionModal/index.tsx","components/SearchInput/index.tsx","components/CRUDTable/AdvancedSearchModal/index.tsx","components/CRUDTable/SearchBar/index.tsx","components/CRUDTable/index.tsx","components/FormInput/index.tsx","helpers/resolve.ts","mockData/jobs.ts"],"sourcesContent":["export const emptyJob = {\r\n  id: 0,\r\n  name: \"\",\r\n  experience: 0,\r\n  salaryExpectation: 0,\r\n  studyFields: [],\r\n};\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@mui/material\";\r\nimport { useFormik } from \"formik\";\r\nimport { emptyJob } from \"./emptyJob\";\r\nimport FormInput from \"../../components/FormInput\";\r\nimport { IJob } from \"../../interfaces/Job\";\r\nimport ActionModal from \"../../components/ActionModal\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IJobModalProps {\r\n  job?: IJob;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst JobModal = (props: IJobModalProps) => {\r\n  const { job, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"jobs.modal\" });\r\n\r\n  let form = useFormik({\r\n    initialValues: job ? { ...job } : { ...emptyJob },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      saveFunction={() => {}}\r\n    >\r\n      <List>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.id\")}\r\n            type=\"number\"\r\n            value={form.values.id}\r\n            name=\"id\"\r\n            onChange={form.handleChange}\r\n            disabled\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.name\")}\r\n            type=\"text\"\r\n            value={form.values.name}\r\n            name=\"name\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.experience\")}\r\n            type=\"number\"\r\n            value={form.values.experience}\r\n            name=\"experience\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormInput\r\n            label={t(\"form.salary-expectation\")}\r\n            type=\"number\"\r\n            value={form.values.salaryExpectation}\r\n            name=\"salaryExpectation\"\r\n            onChange={form.handleChange}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default JobModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport jobs from \"../../mockData/jobs\";\r\nimport JobModal from \"./JobModal\";\r\nimport { IJob } from \"../../interfaces/Job\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst JobsTable = () => {\r\n  const [isJobModalOpen, setIsJobModalOpen] = useState<boolean>(false);\r\n  const [jobModalJob, setJobModalJob] = useState<IJob | undefined>(undefined);\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"jobs.table\" });\r\n\r\n  return (\r\n    <>\r\n      <JobModal\r\n        job={jobModalJob}\r\n        isOpen={isJobModalOpen}\r\n        setIsOpen={setIsJobModalOpen}\r\n      />\r\n      <CRUDTable<IJob>\r\n        data={jobs}\r\n        cellNames={[\r\n          t(\"id\"),\r\n          t(\"name\"),\r\n          t(\"experience\"),\r\n          t(\"salary-expectation\"),\r\n        ]}\r\n        keysToShow={[\"id\", \"name\", \"experience\", \"salaryExpectation\"]}\r\n        setModalData={setJobModalJob}\r\n        setIsDataModalOpen={setIsJobModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default JobsTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport JobsTable from \"./JobsTable\";\r\n\r\nconst Jobs = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"jobs\",\r\n      },\r\n    });\r\n  });\r\n  return <JobsTable />;\r\n};\r\n\r\nexport default Jobs;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { Input, InputAdornment } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SearchInput = (props: { onChange: (e: any) => void }) => {\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"searchInput\" });\r\n  const { onChange } = props;\r\n  return (\r\n    <Input\r\n      type=\"search\"\r\n      onChange={onChange}\r\n      startAdornment={\r\n        <InputAdornment position=\"start\">\r\n          <Search />\r\n        </InputAdornment>\r\n      }\r\n      placeholder={t(\"placeholder\")}\r\n      sx={{ width: \"40em\", mx: \"auto\" }}\r\n    ></Input>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IFilter from \"../../../interfaces/Filter\";\r\n\r\nconst AdvancedSearchModal = (props: {\r\n  isOpen: boolean;\r\n  setIsOpen: (t: boolean) => void;\r\n  filters: IFilter[];\r\n  searchForm: any;\r\n}) => {\r\n  const { isOpen, setIsOpen, filters, searchForm } = props;\r\n  const [search, setSearch] = useState(searchForm.values.search);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.advanced-search-modal\",\r\n  });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Paper\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          minWidth: \"70%\",\r\n          minHeight: \"60%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 3,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Stack mx=\"auto\">\r\n          <Typography variant=\"h5\" component=\"h6\">\r\n            {t(\"title\")}\r\n          </Typography>\r\n        </Stack>\r\n        <Grid container display=\"flex\" width=\"100%\" textAlign=\"center\">\r\n          {filters.map((filter, index) => (\r\n            <Grid item xs={12} md={4} key={index}>\r\n              <TextField\r\n                label={filter.label}\r\n                type=\"text\"\r\n                name={filter.name}\r\n                value={search[filter.name]}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                onChange={(e) => {\r\n                  const cSearch = { ...search };\r\n                  cSearch[filter.name] = e.target.value;\r\n                  setSearch(cSearch);\r\n                }}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Stack mt=\"auto\" ml=\"auto\">\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              searchForm.setFieldValue(\"search\", search);\r\n              searchForm.submitForm();\r\n            }}\r\n            startIcon={<Search />}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Stack>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AdvancedSearchModal;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport SearchInput from \"../../SearchInput\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Search, Tune } from \"@mui/icons-material\";\r\nimport AdvancedSearchModal from \"../AdvancedSearchModal\";\r\n\r\ninterface ISearchBarProps {\r\n  searchForm: any;\r\n  filters?: { label: string; name: string }[];\r\n}\r\n\r\nconst SearchBar = (props: ISearchBarProps) => {\r\n  const { searchForm, filters } = props;\r\n  const [searchKey, setSearchKey] = useState<string>(\"\");\r\n  const [isAdvancedSearchModalOpen, setIsAdvancedSearchModalOpen] =\r\n    useState<boolean>(false);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.search-bar\",\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {Boolean(filters) && (\r\n        <AdvancedSearchModal\r\n          isOpen={isAdvancedSearchModalOpen}\r\n          setIsOpen={setIsAdvancedSearchModalOpen}\r\n          searchForm={searchForm}\r\n          filters={filters ? filters : []}\r\n        />\r\n      )}\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{ mr: \"auto\", width: \"50%\", ml: 2, alignItems: \"flex-end\" }}\r\n      >\r\n        <Grid item xs={5} sx={{ display: \"flex\" }}>\r\n          <SearchInput\r\n            onChange={(e: any) => {\r\n              setSearchKey(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            sx={{ ml: \"auto\" }}\r\n            startIcon={<Search />}\r\n            onClick={() => {\r\n              searchForm.setFieldValue(\"search\", { name: searchKey });\r\n              searchForm.submitForm();\r\n            }}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Grid>\r\n        {Boolean(filters) && (\r\n          <Grid item xs={4}>\r\n            <Button\r\n              sx={{ ml: \"auto\" }}\r\n              startIcon={<Tune />}\r\n              onClick={() => {\r\n                setIsAdvancedSearchModalOpen(true);\r\n              }}\r\n            >\r\n              {t(\"advanced-search\")}\r\n            </Button>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport resolve from \"../../helpers/resolve\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n  searchForm?: any;\r\n  filters?: any;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n    searchForm,\r\n    filters,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      {Boolean(searchForm) && (\r\n        <SearchBar searchForm={searchForm} filters={filters} />\r\n      )}\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name, index) => (\r\n                <TableCell key={index}>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.length > 0 ? (\r\n              data\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell key={index}>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedDatasId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.push(item.id);\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          } else {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.splice(\r\n                              _selectedDatasId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    {keysToShow.map((key, index) => (\r\n                      <TableCell key={index}>\r\n                        {Object.keys(customComponent).includes(key)\r\n                          ? customComponent[key](item[key as keyof typeof item])\r\n                          : key.includes(\".\")\r\n                          ? resolve(key, item)\r\n                          : item[key as keyof typeof item]}\r\n                      </TableCell>\r\n                    ))}\r\n\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setModalData(item);\r\n                          setIsDataModalOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={cellNames.length + 1} align=\"center\">\r\n                  {t(\"no-data\")}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n      <Stack padding={1}>\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","export default function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import { IJob } from \"../interfaces/Job\";\r\n\r\nconst jobs: IJob[] = [\r\n  { id: 1, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 2, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 3, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 4, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 5, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 6, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 7, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 8, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 9, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 10, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 11, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 12, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 13, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 14, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 15, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 16, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 17, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 18, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n  { id: 19, name: \"Example\", experience: 5, salaryExpectation: 5000 },\r\n];\r\n\r\nexport default jobs;\r\n"],"names":["emptyJob","id","name","experience","salaryExpectation","studyFields","props","job","isOpen","setIsOpen","t","useTranslation","keyPrefix","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","title","values","saveFunction","List","ListItem","FormInput","label","type","value","onChange","handleChange","disabled","useState","isJobModalOpen","setIsJobModalOpen","undefined","jobModalJob","setJobModalJob","CRUDTable","data","jobs","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","children","open","onClose","sx","position","top","left","transform","width","height","bgcolor","border","p","color","action","onClick","htmlColor","overflow","marginLeft","startIcon","variant","Input","startAdornment","InputAdornment","Search","placeholder","mx","filters","searchForm","search","setSearch","Modal","Paper","minWidth","minHeight","padding","display","flexDirection","Stack","Typography","component","Grid","container","textAlign","map","filter","index","item","xs","md","TextField","margin","e","cSearch","target","mt","ml","Button","setFieldValue","submitForm","searchKey","setSearchKey","isAdvancedSearchModalOpen","setIsAdvancedSearchModalOpen","Boolean","spacing","mr","alignItems","Tune","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","boxShadow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","length","c","TableBody","slice","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","resolve","BorderColor","colSpan","align","TablePagination","rowsPerPageOptions","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","ButtonGroup","Add","DeleteForeverRounded","error","m","htmlFor","path","obj","split","reduce","prev","curr"],"sourceRoot":""}