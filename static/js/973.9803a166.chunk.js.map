{"version":3,"file":"static/js/973.9803a166.chunk.js","mappings":"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","sources":["Pages/Companies/emptyCompany.ts","Pages/Companies/CompanyModal/index.tsx","Pages/Companies/CompaniesTable.tsx","Pages/Companies/index.tsx","components/ActionModal/index.tsx","components/SearchInput/index.tsx","components/CRUDTable/AdvancedSearchModal/index.tsx","components/CRUDTable/SearchBar/index.tsx","components/CRUDTable/index.tsx","components/FormInput/index.tsx","components/MapsInput/LocationMarker.tsx","components/MapsInput/index.tsx","helpers/calculateDistance.ts","helpers/resolve.ts","mockData/companies.ts"],"sourcesContent":["export const emptyCompany = {\r\n  id: 0,\r\n  name: \"\",\r\n  address: \"\",\r\n  city: \"\",\r\n  sector: \"\",\r\n  jobs: [],\r\n  mapsCoord: {\r\n    lat: 51.509865,\r\n    lng: -0.118092,\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { Box, Grid, List, ListItem, Typography } from \"@mui/material\";\r\nimport FormInput from \"../../../components/FormInput\";\r\nimport ActionModal from \"../../../components/ActionModal\";\r\n\r\nimport { ICompany } from \"../../../interfaces/Company\";\r\nimport { emptyCompany } from \"../emptyCompany\";\r\nimport MapsInput from \"../../../components/MapsInput\";\r\n\r\ninterface ICompanyModalProps {\r\n  company?: ICompany;\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n}\r\n\r\nconst CompanyModal = (props: ICompanyModalProps) => {\r\n  const { company, isOpen, setIsOpen } = props;\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.modal\" });\r\n\r\n  let form = useFormik({\r\n    initialValues: company ? { ...company } : { ...emptyCompany },\r\n    onSubmit: () => {},\r\n    enableReinitialize: true,\r\n  });\r\n  return (\r\n    <ActionModal\r\n      isOpen={isOpen}\r\n      setIsOpen={setIsOpen}\r\n      title={form.values.id ? t(\"edit\") : t(\"add\")}\r\n      saveFunction={() => {}}\r\n    >\r\n      <Grid container padding={2} spacing={2}>\r\n        <Grid xs={12} md={6} item>\r\n          <List>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.id\")}\r\n                type=\"number\"\r\n                value={form.values.id}\r\n                name=\"id\"\r\n                onChange={form.handleChange}\r\n                disabled\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.name\")}\r\n                type=\"text\"\r\n                value={form.values.name}\r\n                name=\"name\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.address\")}\r\n                type=\"text\"\r\n                value={form.values.address}\r\n                name=\"address\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.city\")}\r\n                type=\"text\"\r\n                value={form.values.city}\r\n                name=\"city\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n            <ListItem>\r\n              <FormInput\r\n                label={t(\"form.sector\")}\r\n                type=\"text\"\r\n                value={form.values.sector}\r\n                name=\"sector\"\r\n                onChange={form.handleChange}\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <Box m={1}>\r\n            <Typography variant=\"subtitle1\">{t(\"form.jobs\")}</Typography>\r\n            <List sx={{ padding: 1 }}>\r\n              {form.values.jobs && form.values.jobs.length > 0 ? (\r\n                form.values.jobs?.map((job, index) => (\r\n                  <ListItem key={index}>{job.name}</ListItem>\r\n                ))\r\n              ) : (\r\n                <ListItem>No Jobs</ListItem>\r\n              )}\r\n            </List>\r\n          </Box>\r\n          <MapsInput\r\n            mainCoords={form.values.mapsCoord}\r\n            setCoord={(coord: any) => {\r\n              form.setFieldValue(\"mapsCoord\", coord);\r\n            }}\r\n            isMainMoving\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nexport default CompanyModal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport companies from \"../../mockData/companies\";\r\nimport CompanyModal from \"./CompanyModal\";\r\nimport { ICompany } from \"../../interfaces/Company\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CRUDTable from \"../../components/CRUDTable\";\r\n\r\nconst CompanysTable = () => {\r\n  const { t } = useTranslation(\"pages\", { keyPrefix: \"companies.table\" });\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState<boolean>(false);\r\n  const [companyModalCompany, setCompanyModalCompany] = useState<\r\n    ICompany | undefined\r\n  >(undefined);\r\n\r\n  return (\r\n    <>\r\n      <CompanyModal\r\n        company={companyModalCompany}\r\n        isOpen={isCompanyModalOpen}\r\n        setIsOpen={setIsCompanyModalOpen}\r\n      />\r\n      <CRUDTable<ICompany>\r\n        data={companies}\r\n        cellNames={[t(\"id\"), t(\"name\"), t(\"city\")]}\r\n        keysToShow={[\"id\", \"name\", \"city\"]}\r\n        setModalData={setCompanyModalCompany}\r\n        setIsDataModalOpen={setIsCompanyModalOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CompanysTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { pageRedux } from \"../../redux\";\r\nimport CompaniesTable from \"./CompaniesTable\";\r\n\r\nconst Companies = () => {\r\n  useEffect(() => {\r\n    pageRedux.dispatch({\r\n      type: \"CHANGE_TITLE\",\r\n      payload: {\r\n        title: \"companies\",\r\n      },\r\n    });\r\n  });\r\n  return <CompaniesTable />;\r\n};\r\n\r\nexport default Companies;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  IconButton,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n} from \"@mui/material\";\r\nimport { CloseRounded, SaveRounded } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface IActionModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen(isOpen: boolean): any;\r\n  title: string;\r\n  saveFunction: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ActionModal = (props: IActionModalProps) => {\r\n  const { isOpen, setIsOpen, title, saveFunction, children } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"actionModal\" });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Card\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          width: \"95%\",\r\n          height: \"85%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n        }}\r\n      >\r\n        <CardHeader\r\n          sx={{ p: 2, bgcolor: \"success.dark\", color: \"white\" }}\r\n          title={title}\r\n          action={\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n              }}\r\n            >\r\n              <CloseRounded htmlColor=\"white\" />\r\n            </IconButton>\r\n          }\r\n        />\r\n        <CardContent sx={{ height: \"76%\", overflow: \"auto\" }}>\r\n          {children}\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            sx={{ border: \"none !important\", marginLeft: \"auto\" }}\r\n            startIcon={<SaveRounded />}\r\n            color=\"success\"\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              saveFunction();\r\n            }}\r\n          >\r\n            {t(\"save\")}\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ActionModal;\r\n","import React from \"react\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { Input, InputAdornment } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst SearchInput = (props: { onChange: (e: any) => void }) => {\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"searchInput\" });\r\n  const { onChange } = props;\r\n  return (\r\n    <Input\r\n      type=\"search\"\r\n      onChange={onChange}\r\n      startAdornment={\r\n        <InputAdornment position=\"start\">\r\n          <Search />\r\n        </InputAdornment>\r\n      }\r\n      placeholder={t(\"placeholder\")}\r\n      sx={{ width: \"40em\", mx: \"auto\" }}\r\n    ></Input>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IFilter from \"../../../interfaces/Filter\";\r\n\r\nconst AdvancedSearchModal = (props: {\r\n  isOpen: boolean;\r\n  setIsOpen: (t: boolean) => void;\r\n  filters: IFilter[];\r\n  searchForm: any;\r\n}) => {\r\n  const { isOpen, setIsOpen, filters, searchForm } = props;\r\n  const [search, setSearch] = useState(searchForm.values.search);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.advanced-search-modal\",\r\n  });\r\n  return (\r\n    <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Paper\r\n        sx={{\r\n          position: \"absolute\" as \"absolute\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          minWidth: \"70%\",\r\n          minHeight: \"60%\",\r\n          bgcolor: \"background.paper\",\r\n          border: \"none\",\r\n          padding: 3,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Stack mx=\"auto\">\r\n          <Typography variant=\"h5\" component=\"h6\">\r\n            {t(\"title\")}\r\n          </Typography>\r\n        </Stack>\r\n        <Grid container display=\"flex\" width=\"100%\" textAlign=\"center\">\r\n          {filters.map((filter, index) => (\r\n            <Grid item xs={12} md={4} key={index}>\r\n              <TextField\r\n                label={filter.label}\r\n                type=\"text\"\r\n                name={filter.name}\r\n                value={search[filter.name]}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                onChange={(e) => {\r\n                  const cSearch = { ...search };\r\n                  cSearch[filter.name] = e.target.value;\r\n                  setSearch(cSearch);\r\n                }}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Stack mt=\"auto\" ml=\"auto\">\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setIsOpen(false);\r\n              searchForm.setFieldValue(\"search\", search);\r\n              searchForm.submitForm();\r\n            }}\r\n            startIcon={<Search />}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Stack>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AdvancedSearchModal;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid } from \"@mui/material\";\r\nimport SearchInput from \"../../SearchInput\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Search, Tune } from \"@mui/icons-material\";\r\nimport AdvancedSearchModal from \"../AdvancedSearchModal\";\r\n\r\ninterface ISearchBarProps {\r\n  searchForm: any;\r\n  filters?: { label: string; name: string }[];\r\n}\r\n\r\nconst SearchBar = (props: ISearchBarProps) => {\r\n  const { searchForm, filters } = props;\r\n  const [searchKey, setSearchKey] = useState<string>(\"\");\r\n  const [isAdvancedSearchModalOpen, setIsAdvancedSearchModalOpen] =\r\n    useState<boolean>(false);\r\n  const { t } = useTranslation(\"components\", {\r\n    keyPrefix: \"crudTable.search-bar\",\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {Boolean(filters) && (\r\n        <AdvancedSearchModal\r\n          isOpen={isAdvancedSearchModalOpen}\r\n          setIsOpen={setIsAdvancedSearchModalOpen}\r\n          searchForm={searchForm}\r\n          filters={filters ? filters : []}\r\n        />\r\n      )}\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        sx={{ mr: \"auto\", width: \"50%\", ml: 2, alignItems: \"flex-end\" }}\r\n      >\r\n        <Grid item xs={5} sx={{ display: \"flex\" }}>\r\n          <SearchInput\r\n            onChange={(e: any) => {\r\n              setSearchKey(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            sx={{ ml: \"auto\" }}\r\n            startIcon={<Search />}\r\n            onClick={() => {\r\n              searchForm.setFieldValue(\"search\", { name: searchKey });\r\n              searchForm.submitForm();\r\n            }}\r\n          >\r\n            {t(\"search\")}\r\n          </Button>\r\n        </Grid>\r\n        {Boolean(filters) && (\r\n          <Grid item xs={4}>\r\n            <Button\r\n              sx={{ ml: \"auto\" }}\r\n              startIcon={<Tune />}\r\n              onClick={() => {\r\n                setIsAdvancedSearchModalOpen(true);\r\n              }}\r\n            >\r\n              {t(\"advanced-search\")}\r\n            </Button>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Add, BorderColor, DeleteForeverRounded } from \"@mui/icons-material\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Paper,\r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport resolve from \"../../helpers/resolve\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\ninterface ICRUDTableProps<DataType> {\r\n  data: DataType[];\r\n  cellNames: string[];\r\n  keysToShow: string[];\r\n  setModalData: (data: DataType | undefined) => void;\r\n  setIsDataModalOpen: (value: boolean) => void;\r\n  customDataComponent?: any;\r\n  searchForm?: any;\r\n  filters?: any;\r\n}\r\n\r\nconst CRUDTable = <DataType extends { id: number }>(\r\n  props: ICRUDTableProps<DataType>\r\n) => {\r\n  const {\r\n    data,\r\n    cellNames,\r\n    setModalData,\r\n    keysToShow,\r\n    setIsDataModalOpen,\r\n    customDataComponent,\r\n    searchForm,\r\n    filters,\r\n  } = props;\r\n  let customComponent = customDataComponent ? customDataComponent : [];\r\n\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"crudTable\" });\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(0);\r\n  const [rowPerPage, setRowPerPage] = useState<number>(10);\r\n  const [selectedDatasId, setSelectedDatasId] = useState<number[]>([]);\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: \"calc(100% - 40px)\",\r\n        marginLeft: \"auto\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      {Boolean(searchForm) && (\r\n        <SearchBar searchForm={searchForm} filters={filters} />\r\n      )}\r\n      <TableContainer sx={{ maxHeight: \"500px\" }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Checkbox\r\n                  value=\"all\"\r\n                  checked={data.length === selectedDatasId.length}\r\n                  onChange={(e) => {\r\n                    if (e.target.checked) {\r\n                      setSelectedDatasId(data.map((c: DataType) => c.id));\r\n                    } else setSelectedDatasId([]);\r\n                  }}\r\n                />\r\n              </TableCell>\r\n              {cellNames.map((name, index) => (\r\n                <TableCell key={index}>{name}</TableCell>\r\n              ))}\r\n              <TableCell />\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.length > 0 ? (\r\n              data\r\n                .slice(currentPage * rowPerPage, (currentPage + 1) * rowPerPage)\r\n                .map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell key={index}>\r\n                      <Checkbox\r\n                        value={item.id}\r\n                        checked={selectedDatasId.includes(item.id)}\r\n                        onChange={(e) => {\r\n                          if (e.target.checked) {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.push(item.id);\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          } else {\r\n                            const _selectedDatasId = [...selectedDatasId];\r\n                            _selectedDatasId.splice(\r\n                              _selectedDatasId.indexOf(item.id),\r\n                              1\r\n                            );\r\n                            setSelectedDatasId(_selectedDatasId);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    {keysToShow.map((key, index) => (\r\n                      <TableCell key={index}>\r\n                        {Object.keys(customComponent).includes(key)\r\n                          ? customComponent[key](item[key as keyof typeof item])\r\n                          : key.includes(\".\")\r\n                          ? resolve(key, item)\r\n                          : item[key as keyof typeof item]}\r\n                      </TableCell>\r\n                    ))}\r\n\r\n                    <TableCell>\r\n                      <Button\r\n                        sx={{ border: \"none !important\" }}\r\n                        color=\"warning\"\r\n                        variant=\"contained\"\r\n                        onClick={() => {\r\n                          setModalData(item);\r\n                          setIsDataModalOpen(true);\r\n                        }}\r\n                      >\r\n                        <BorderColor />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={cellNames.length + 1} align=\"center\">\r\n                  {t(\"no-data\")}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={data.length}\r\n        rowsPerPage={rowPerPage}\r\n        page={currentPage}\r\n        onPageChange={(e: unknown, newPage: number) => {\r\n          setCurrentPage(newPage);\r\n        }}\r\n        onRowsPerPageChange={(e) => {\r\n          setRowPerPage(+e.target.value);\r\n          setCurrentPage(0);\r\n        }}\r\n      />\r\n      <Stack padding={1}>\r\n        <ButtonGroup\r\n          sx={{ marginLeft: \"auto\" }}\r\n          aria-label=\"medium button group contained\"\r\n          variant=\"contained\"\r\n        >\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<Add />}\r\n            color=\"success\"\r\n            onClick={() => {\r\n              setModalData(undefined);\r\n              setIsDataModalOpen(true);\r\n            }}\r\n          >\r\n            {t(\"add\")}\r\n          </Button>\r\n          <Button\r\n            sx={{ border: \"none !important\" }}\r\n            startIcon={<DeleteForeverRounded />}\r\n            color=\"error\"\r\n          >\r\n            {t(\"delete\")}\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Stack>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CRUDTable;\r\n","import React from \"react\";\r\nimport { FormControl, Input, InputLabel } from \"@mui/material\";\r\n\r\ninterface IFormInputProps {\r\n  label: string;\r\n  type: \"text\" | \"email\" | \"number\";\r\n  value: number | string | undefined;\r\n  name: string;\r\n  disabled?: boolean;\r\n  onChange(e: any): void;\r\n}\r\n\r\nconst FormInput = (props: IFormInputProps) => {\r\n  const { label, type, value, name, onChange, disabled } = props;\r\n  return (\r\n    <FormControl error={!Boolean(value)} sx={{ width: \"100%\", m: 1 }}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Input\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        type={type}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { Marker, useMapEvents } from \"react-leaflet\";\r\n\r\nconst LocationMarker = (props: any) => {\r\n  const { position, callBackFn } = props;\r\n  const map = useMapEvents({\r\n    click(e) {\r\n      callBackFn(e.latlng);\r\n    },\r\n  });\r\n  // ignore this line\r\n  if (false) console.log(map);\r\n  const markerRef = useRef(null);\r\n  const eventHandlers = useMemo(\r\n    () => ({\r\n      dragend() {\r\n        const marker = markerRef.current as any;\r\n        if (marker != null) {\r\n          callBackFn(marker.getLatLng());\r\n        }\r\n      },\r\n    }),\r\n    [callBackFn]\r\n  );\r\n  return (\r\n    <>\r\n      {position && (\r\n        <Marker\r\n          ref={markerRef}\r\n          eventHandlers={eventHandlers}\r\n          draggable\r\n          position={position}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","import React, { useState } from \"react\";\r\nimport { LatLngExpression } from \"leaflet\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport calculateDistance from \"../../helpers/calculateDistance\";\r\n\r\ninterface IMapsInput {\r\n  mainCoords: LatLngExpression | { lat: number; lng: number };\r\n  secondCoord?: LatLngExpression | { lat: number; lng: number };\r\n  setCoord: (coord: any) => void;\r\n  isMainMoving?: boolean;\r\n}\r\n\r\nconst MapsInput = (props: IMapsInput) => {\r\n  const { mainCoords, secondCoord, isMainMoving, setCoord } = props;\r\n  const { t } = useTranslation(\"components\", { keyPrefix: \"mapsInput\" });\r\n  const [selectionCoords, setSelectionCoords] = useState<any>(\r\n    secondCoord || mainCoords\r\n  );\r\n  const [distance, setDistance] = useState<number | string>(0);\r\n\r\n  return (\r\n    <Card sx={{ m: 1 }}>\r\n      {!isMainMoving && <CardHeader title={`${distance} ${t(\"title\")}`} />}\r\n      <CardContent>\r\n        <MapContainer\r\n          center={mainCoords}\r\n          zoom={12}\r\n          id=\"map\"\r\n          style={{ height: \"400px\", width: \"100%\", color: \"black\" }}\r\n          scrollWheelZoom={false}\r\n        >\r\n          <TileLayer\r\n            attribution=\"\"\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {Boolean(mainCoords && !isMainMoving) && (\r\n            <Marker position={mainCoords} />\r\n          )}\r\n          <LocationMarker\r\n            position={selectionCoords}\r\n            callBackFn={(coords: any) => {\r\n              if (coords) {\r\n                const dist = calculateDistance(mainCoords as any, coords);\r\n                console.log(coords, mainCoords, dist);\r\n\r\n                setDistance(dist.toFixed(3));\r\n                setSelectionCoords(coords);\r\n                setCoord(coords);\r\n              }\r\n            }}\r\n          />\r\n        </MapContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MapsInput;\r\n","export default function calculateDistance(\r\n  coord1: { lat: number; lng: number },\r\n  coord2: { lat: number; lng: number }\r\n) {\r\n  const R = 6371; // km\r\n  const dLat = toRad(coord2.lat - coord1.lat);\r\n  const dLon = toRad(coord2.lng - coord1.lng);\r\n  const lat1 = toRad(coord1.lat);\r\n  const lat2 = toRad(coord2.lat);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n}\r\n\r\n// Converts numeric degrees to radians\r\nfunction toRad(Value: number) {\r\n  return (Value * Math.PI) / 180;\r\n}\r\n","export default function resolve(path: string, obj: Object) {\r\n  return path.split(\".\").reduce((prev: any, curr: string) => {\r\n    return prev ? prev[curr as keyof typeof prev] : null;\r\n  }, obj);\r\n}\r\n","import { ICompany } from \"../interfaces/Company\";\r\n\r\nconst companies: ICompany[] = [\r\n  {\r\n    id: 1,\r\n    name: \"Company Ankara\",\r\n    city: \"Ankara\",\r\n    mapsCoord: {\r\n      lat: 39.925533,\r\n      lng: 32.866287,\r\n    },\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Company Paris\",\r\n    city: \"Paris\",\r\n    mapsCoord: {\r\n      lat: 48.864716,\r\n      lng: 2.349014,\r\n    },\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Company London\",\r\n    city: \"London\",\r\n    mapsCoord: {\r\n      lat: 51.509865,\r\n      lng: -0.118092,\r\n    },\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Company New York\",\r\n    city: \"New York\",\r\n    mapsCoord: {\r\n      lat: 40.73061,\r\n      lng: -73.935242,\r\n    },\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Company Berlin\",\r\n    city: \"Berlin\",\r\n    mapsCoord: {\r\n      lat: 52.520008,\r\n      lng: 13.404954,\r\n    },\r\n  },\r\n];\r\n\r\nexport default companies;\r\n"],"names":["emptyCompany","id","name","address","city","sector","jobs","mapsCoord","lat","lng","props","company","isOpen","setIsOpen","t","useTranslation","keyPrefix","form","useFormik","initialValues","onSubmit","enableReinitialize","ActionModal","title","values","saveFunction","Grid","container","padding","spacing","xs","md","item","List","ListItem","FormInput","label","type","value","onChange","handleChange","disabled","Box","m","Typography","variant","sx","length","map","job","index","MapsInput","mainCoords","setCoord","coord","setFieldValue","isMainMoving","useState","isCompanyModalOpen","setIsCompanyModalOpen","undefined","companyModalCompany","setCompanyModalCompany","CRUDTable","data","companies","cellNames","keysToShow","setModalData","setIsDataModalOpen","useEffect","pageRedux","payload","CompaniesTable","children","open","onClose","position","top","left","transform","width","height","bgcolor","border","p","color","action","onClick","htmlColor","overflow","marginLeft","startIcon","Input","startAdornment","InputAdornment","Search","placeholder","mx","filters","searchForm","search","setSearch","Modal","Paper","minWidth","minHeight","display","flexDirection","Stack","component","textAlign","filter","TextField","margin","e","cSearch","target","mt","ml","Button","submitForm","searchKey","setSearchKey","isAdvancedSearchModalOpen","setIsAdvancedSearchModalOpen","Boolean","mr","alignItems","Tune","customDataComponent","customComponent","currentPage","setCurrentPage","rowPerPage","setRowPerPage","selectedDatasId","setSelectedDatasId","boxShadow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","checked","c","TableBody","slice","includes","_selectedDatasId","push","splice","indexOf","key","Object","keys","resolve","BorderColor","colSpan","align","TablePagination","rowsPerPageOptions","count","rowsPerPage","page","onPageChange","newPage","onRowsPerPageChange","ButtonGroup","Add","DeleteForeverRounded","error","htmlFor","callBackFn","useMapEvents","click","latlng","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","Marker","ref","draggable","secondCoord","selectionCoords","setSelectionCoords","distance","setDistance","Card","CardHeader","CardContent","MapContainer","center","zoom","style","scrollWheelZoom","TileLayer","attribution","url","coords","dist","calculateDistance","console","log","toFixed","coord1","coord2","dLat","toRad","dLon","lat1","lat2","a","Math","sin","cos","atan2","sqrt","Value","PI","path","obj","split","reduce","prev","curr"],"sourceRoot":""}